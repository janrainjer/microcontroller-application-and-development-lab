
Speacial_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e8c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800412c  0800412c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004134  08004134  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800413c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000010  0800414c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800414c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a3e5  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ab  00000000  00000000  0002a466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b0  00000000  00000000  0002c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266bd  00000000  00000000  0002ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a195  00000000  00000000  000530ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f047d  00000000  00000000  0005d282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d38  00000000  00000000  0014d700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0014f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	0800406c 	.word	0x0800406c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	0800406c 	.word	0x0800406c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fce9 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f8da 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f994 	bl	800087c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f962 	bl	800081c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000558:	f000 f930 	bl	80007bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,(uint8_t*) &ch,1);
 800055c:	2201      	movs	r2, #1
 800055e:	495b      	ldr	r1, [pc, #364]	; (80006cc <main+0x188>)
 8000560:	485b      	ldr	r0, [pc, #364]	; (80006d0 <main+0x18c>)
 8000562:	f002 fb16 	bl	8002b92 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3,(uint8_t*) "Man from U.A.R.T.2\r\nQuit PRESS q\r\n ", strlen("Man from U.A.R.T.2\r\nQuit PRESS q\r\n"),1000);
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	2222      	movs	r2, #34	; 0x22
 800056c:	4959      	ldr	r1, [pc, #356]	; (80006d4 <main+0x190>)
 800056e:	4858      	ldr	r0, [pc, #352]	; (80006d0 <main+0x18c>)
 8000570:	f002 f9c8 	bl	8002904 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    	// first time input for text "Mr.One is ready"
    	if(!state&&readytosend&&!firstTime){
 8000574:	4b58      	ldr	r3, [pc, #352]	; (80006d8 <main+0x194>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d119      	bne.n	80005b0 <main+0x6c>
 800057c:	4b57      	ldr	r3, [pc, #348]	; (80006dc <main+0x198>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d015      	beq.n	80005b0 <main+0x6c>
 8000584:	4b56      	ldr	r3, [pc, #344]	; (80006e0 <main+0x19c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d111      	bne.n	80005b0 <main+0x6c>
    		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800058c:	bf00      	nop
 800058e:	4b50      	ldr	r3, [pc, #320]	; (80006d0 <main+0x18c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000598:	2b40      	cmp	r3, #64	; 0x40
 800059a:	d1f8      	bne.n	800058e <main+0x4a>
    	   HAL_UART_Transmit(&huart3,(uint8_t*) "\tName: ", strlen("\tName: "),1000);
 800059c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a0:	2207      	movs	r2, #7
 80005a2:	4950      	ldr	r1, [pc, #320]	; (80006e4 <main+0x1a0>)
 80005a4:	484a      	ldr	r0, [pc, #296]	; (80006d0 <main+0x18c>)
 80005a6:	f002 f9ad 	bl	8002904 <HAL_UART_Transmit>
    	   firstTime=1;
 80005aa:	4b4d      	ldr	r3, [pc, #308]	; (80006e0 <main+0x19c>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
    	}
    	//====== if not ready to send wait for uart2 input ========
    	if(!readytosend){
 80005b0:	4b4a      	ldr	r3, [pc, #296]	; (80006dc <main+0x198>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	f040 8084 	bne.w	80006c2 <main+0x17e>
//    		if(!firstTime){
//    			while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)==RESET){}
//    			HAL_UART_Receive(&huart2,(uint8_t*) recievebuffer, 100,1000);
//    			firstTime=1;
//    		}
    		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)==RESET){}
 80005ba:	bf00      	nop
 80005bc:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <main+0x1a4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 0320 	and.w	r3, r3, #32
 80005c6:	2b20      	cmp	r3, #32
 80005c8:	d1f8      	bne.n	80005bc <main+0x78>
    		HAL_UART_Receive(&huart2,(uint8_t*) recievebuffer, 100,1000);
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	2264      	movs	r2, #100	; 0x64
 80005d0:	4946      	ldr	r1, [pc, #280]	; (80006ec <main+0x1a8>)
 80005d2:	4845      	ldr	r0, [pc, #276]	; (80006e8 <main+0x1a4>)
 80005d4:	f002 fa19 	bl	8002a0a <HAL_UART_Receive>
    		if(recievebuffer[0]=='q'&&strlen(recievebuffer)==1){
 80005d8:	4b44      	ldr	r3, [pc, #272]	; (80006ec <main+0x1a8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b71      	cmp	r3, #113	; 0x71
 80005de:	d118      	bne.n	8000612 <main+0xce>
 80005e0:	4842      	ldr	r0, [pc, #264]	; (80006ec <main+0x1a8>)
 80005e2:	f7ff fe29 	bl	8000238 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d112      	bne.n	8000612 <main+0xce>
    			state=2;
 80005ec:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <main+0x194>)
 80005ee:	2202      	movs	r2, #2
 80005f0:	701a      	strb	r2, [r3, #0]
    			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80005f2:	bf00      	nop
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <main+0x18c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005fe:	2b40      	cmp	r3, #64	; 0x40
 8000600:	d1f8      	bne.n	80005f4 <main+0xb0>
    			HAL_UART_Transmit(&huart3,(uint8_t*) "Program ended from U.A.R.T.1", strlen("Program ended from U.A.R.T.1"),1000);
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	221c      	movs	r2, #28
 8000608:	4939      	ldr	r1, [pc, #228]	; (80006f0 <main+0x1ac>)
 800060a:	4831      	ldr	r0, [pc, #196]	; (80006d0 <main+0x18c>)
 800060c:	f002 f97a 	bl	8002904 <HAL_UART_Transmit>
 8000610:	e057      	b.n	80006c2 <main+0x17e>
    			//HAL_NVIC_DisableIRQ(USART3_IRQn);
    		}
    		else{
    			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000612:	bf00      	nop
 8000614:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <main+0x18c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800061e:	2b40      	cmp	r3, #64	; 0x40
 8000620:	d1f8      	bne.n	8000614 <main+0xd0>
    			HAL_UART_Transmit(&huart3,(uint8_t*) recievebuffer, strlen(recievebuffer),1000);
 8000622:	4832      	ldr	r0, [pc, #200]	; (80006ec <main+0x1a8>)
 8000624:	f7ff fe08 	bl	8000238 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	492e      	ldr	r1, [pc, #184]	; (80006ec <main+0x1a8>)
 8000632:	4827      	ldr	r0, [pc, #156]	; (80006d0 <main+0x18c>)
 8000634:	f002 f966 	bl	8002904 <HAL_UART_Transmit>
    			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000638:	bf00      	nop
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <main+0x18c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000644:	2b40      	cmp	r3, #64	; 0x40
 8000646:	d1f8      	bne.n	800063a <main+0xf6>
    			HAL_UART_Transmit(&huart3,(uint8_t*) "\t", 1,1000);
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	2201      	movs	r2, #1
 800064e:	4929      	ldr	r1, [pc, #164]	; (80006f4 <main+0x1b0>)
 8000650:	481f      	ldr	r0, [pc, #124]	; (80006d0 <main+0x18c>)
 8000652:	f002 f957 	bl	8002904 <HAL_UART_Transmit>
    			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000656:	bf00      	nop
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <main+0x18c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000662:	2b40      	cmp	r3, #64	; 0x40
 8000664:	d1f8      	bne.n	8000658 <main+0x114>
    			HAL_UART_Transmit(&huart3,(uint8_t*) name, strlen(name),1000);
 8000666:	4824      	ldr	r0, [pc, #144]	; (80006f8 <main+0x1b4>)
 8000668:	f7ff fde6 	bl	8000238 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	4920      	ldr	r1, [pc, #128]	; (80006f8 <main+0x1b4>)
 8000676:	4816      	ldr	r0, [pc, #88]	; (80006d0 <main+0x18c>)
 8000678:	f002 f944 	bl	8002904 <HAL_UART_Transmit>
    			if(!checkRe){
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <main+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <main+0x148>
    				checkRe=1;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <main+0x1b8>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e00e      	b.n	80006aa <main+0x166>
    			}else{
    				while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800068c:	bf00      	nop
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <main+0x18c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000698:	2b40      	cmp	r3, #64	; 0x40
 800069a:	d1f8      	bne.n	800068e <main+0x14a>
    				HAL_UART_Transmit(&huart3,(uint8_t*) " => ", strlen(" => "),1000);
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	2204      	movs	r2, #4
 80006a2:	4917      	ldr	r1, [pc, #92]	; (8000700 <main+0x1bc>)
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <main+0x18c>)
 80006a6:	f002 f92d 	bl	8002904 <HAL_UART_Transmit>
    			}
    			readytosend=1;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <main+0x198>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
    			memset(recievebuffer,0,strlen(recievebuffer));
 80006b0:	480e      	ldr	r0, [pc, #56]	; (80006ec <main+0x1a8>)
 80006b2:	f7ff fdc1 	bl	8000238 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <main+0x1a8>)
 80006be:	f003 fca9 	bl	8004014 <memset>
    			//HAL_NVIC_EnableIRQ(USART3_IRQn);
    		}
    	}
    	HAL_Delay(1000);
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	f000 fc87 	bl	8000fd8 <HAL_Delay>
    	if(!state&&readytosend&&!firstTime){
 80006ca:	e753      	b.n	8000574 <main+0x30>
 80006cc:	20000269 	.word	0x20000269
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	08004084 	.word	0x08004084
 80006d8:	20000268 	.word	0x20000268
 80006dc:	2000026a 	.word	0x2000026a
 80006e0:	2000026b 	.word	0x2000026b
 80006e4:	080040a8 	.word	0x080040a8
 80006e8:	2000002c 	.word	0x2000002c
 80006ec:	20000204 	.word	0x20000204
 80006f0:	080040b0 	.word	0x080040b0
 80006f4:	080040d0 	.word	0x080040d0
 80006f8:	2000013c 	.word	0x2000013c
 80006fc:	2000026c 	.word	0x2000026c
 8000700:	080040d4 	.word	0x080040d4

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fc7e 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xb0>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xb0>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xb0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <SystemClock_Config+0xb4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <SystemClock_Config+0xb4>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <SystemClock_Config+0xb4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4618      	mov	r0, r3
 8000772:	f000 ffbd 	bl	80016f0 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800077c:	f000 fa72 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fa56 	bl	8001c4c <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007a6:	f000 fa5d 	bl	8000c64 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	f002 f832 	bl	8002868 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 fa2b 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000002c 	.word	0x2000002c
 8000818:	40004400 	.word	0x40004400

0800081c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	; (8000878 <MX_USART3_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART3_UART_Init+0x58>)
 8000860:	f002 f802 	bl	8002868 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 f9fb 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000b4 	.word	0x200000b4
 8000878:	40004800 	.word	0x40004800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_GPIO_Init+0x7c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_GPIO_Init+0x7c>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_GPIO_Init+0x80>)
 80008da:	f000 fd45 	bl	8001368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f000 fc77 	bl	80011d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008e8:	2028      	movs	r0, #40	; 0x28
 80008ea:	f000 fc90 	bl	800120e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020800 	.word	0x40020800

08000900 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
	//debug btn
	if(GPIO_Pin == GPIO_PIN_13){
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000910:	d11f      	bne.n	8000952 <HAL_GPIO_EXTI_Callback+0x52>
		HAL_UART_Transmit(&huart3,(uint8_t*) "Mr.Mock", strlen("Mr.Mock"),1000);
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	2207      	movs	r2, #7
 8000918:	4910      	ldr	r1, [pc, #64]	; (800095c <HAL_GPIO_EXTI_Callback+0x5c>)
 800091a:	4811      	ldr	r0, [pc, #68]	; (8000960 <HAL_GPIO_EXTI_Callback+0x60>)
 800091c:	f001 fff2 	bl	8002904 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,(uint8_t*) " : ", strlen(" : "),100);
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	2203      	movs	r2, #3
 8000924:	490f      	ldr	r1, [pc, #60]	; (8000964 <HAL_GPIO_EXTI_Callback+0x64>)
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <HAL_GPIO_EXTI_Callback+0x60>)
 8000928:	f001 ffec 	bl	8002904 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,(uint8_t*) "test text", strlen("test text"),100);
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2209      	movs	r2, #9
 8000930:	490d      	ldr	r1, [pc, #52]	; (8000968 <HAL_GPIO_EXTI_Callback+0x68>)
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <HAL_GPIO_EXTI_Callback+0x60>)
 8000934:	f001 ffe6 	bl	8002904 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,(uint8_t*) newline, strlen(newline),100);
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <HAL_GPIO_EXTI_Callback+0x6c>)
 800093a:	f7ff fc7d 	bl	8000238 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	4909      	ldr	r1, [pc, #36]	; (800096c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <HAL_GPIO_EXTI_Callback+0x60>)
 8000948:	f001 ffdc 	bl	8002904 <HAL_UART_Transmit>
		readytosend=1;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_GPIO_EXTI_Callback+0x70>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
		//HAL_NVIC_EnableIRQ(USART3_IRQn);
	}

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	080040dc 	.word	0x080040dc
 8000960:	200000b4 	.word	0x200000b4
 8000964:	080040e4 	.word	0x080040e4
 8000968:	080040e8 	.word	0x080040e8
 800096c:	20000000 	.word	0x20000000
 8000970:	2000026a 	.word	0x2000026a

08000974 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    if(huart==&huart3){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4aa9      	ldr	r2, [pc, #676]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	f040 814a 	bne.w	8000c1a <HAL_UART_RxCpltCallback+0x2a6>
		HAL_UART_Receive_IT(&huart3,(uint8_t*) &ch,1);
 8000986:	2201      	movs	r2, #1
 8000988:	49a7      	ldr	r1, [pc, #668]	; (8000c28 <HAL_UART_RxCpltCallback+0x2b4>)
 800098a:	48a6      	ldr	r0, [pc, #664]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 800098c:	f002 f901 	bl	8002b92 <HAL_UART_Receive_IT>
		if(readytosend){
 8000990:	4ba6      	ldr	r3, [pc, #664]	; (8000c2c <HAL_UART_RxCpltCallback+0x2b8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 8140 	beq.w	8000c1a <HAL_UART_RxCpltCallback+0x2a6>
		if(!state){
 800099a:	4ba5      	ldr	r3, [pc, #660]	; (8000c30 <HAL_UART_RxCpltCallback+0x2bc>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d17d      	bne.n	8000a9e <HAL_UART_RxCpltCallback+0x12a>
			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80009a2:	bf00      	nop
 80009a4:	4b9f      	ldr	r3, [pc, #636]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	2b40      	cmp	r3, #64	; 0x40
 80009b0:	d1f8      	bne.n	80009a4 <HAL_UART_RxCpltCallback+0x30>
			HAL_UART_Transmit(&huart3,(uint8_t*) &ch, 1,1000);
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	2201      	movs	r2, #1
 80009b8:	499b      	ldr	r1, [pc, #620]	; (8000c28 <HAL_UART_RxCpltCallback+0x2b4>)
 80009ba:	489a      	ldr	r0, [pc, #616]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 80009bc:	f001 ffa2 	bl	8002904 <HAL_UART_Transmit>
			if(ch==13){
 80009c0:	4b99      	ldr	r3, [pc, #612]	; (8000c28 <HAL_UART_RxCpltCallback+0x2b4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b0d      	cmp	r3, #13
 80009c6:	d160      	bne.n	8000a8a <HAL_UART_RxCpltCallback+0x116>
				 //print new line
				while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80009c8:	bf00      	nop
 80009ca:	4b96      	ldr	r3, [pc, #600]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d4:	2b40      	cmp	r3, #64	; 0x40
 80009d6:	d1f8      	bne.n	80009ca <HAL_UART_RxCpltCallback+0x56>
				HAL_UART_Transmit(&huart3,(uint8_t*) newline, strlen(newline),1000);
 80009d8:	4896      	ldr	r0, [pc, #600]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 80009da:	f7ff fc2d 	bl	8000238 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	4993      	ldr	r1, [pc, #588]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 80009e8:	488e      	ldr	r0, [pc, #568]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 80009ea:	f001 ff8b 	bl	8002904 <HAL_UART_Transmit>
				//======= send that this person is ready!!! =============
				while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80009ee:	bf00      	nop
 80009f0:	4b91      	ldr	r3, [pc, #580]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d1f8      	bne.n	80009f0 <HAL_UART_RxCpltCallback+0x7c>
				HAL_UART_Transmit(&huart2,(uint8_t*) "\t", 1,1000);
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	2201      	movs	r2, #1
 8000a04:	498d      	ldr	r1, [pc, #564]	; (8000c3c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a06:	488c      	ldr	r0, [pc, #560]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a08:	f001 ff7c 	bl	8002904 <HAL_UART_Transmit>
				while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000a0c:	bf00      	nop
 8000a0e:	4b8a      	ldr	r3, [pc, #552]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a18:	2b40      	cmp	r3, #64	; 0x40
 8000a1a:	d1f8      	bne.n	8000a0e <HAL_UART_RxCpltCallback+0x9a>
			    HAL_UART_Transmit(&huart2,(uint8_t*) name, strlen(name),1000);
 8000a1c:	4888      	ldr	r0, [pc, #544]	; (8000c40 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a1e:	f7ff fc0b 	bl	8000238 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	4985      	ldr	r1, [pc, #532]	; (8000c40 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a2c:	4882      	ldr	r0, [pc, #520]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a2e:	f001 ff69 	bl	8002904 <HAL_UART_Transmit>
			    while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000a32:	bf00      	nop
 8000a34:	4b80      	ldr	r3, [pc, #512]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	2b40      	cmp	r3, #64	; 0x40
 8000a40:	d1f8      	bne.n	8000a34 <HAL_UART_RxCpltCallback+0xc0>
				HAL_UART_Transmit(&huart2,(uint8_t*) " is ready.", strlen(" is ready."),1000);
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	220a      	movs	r2, #10
 8000a48:	497e      	ldr	r1, [pc, #504]	; (8000c44 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a4a:	487b      	ldr	r0, [pc, #492]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a4c:	f001 ff5a 	bl	8002904 <HAL_UART_Transmit>
				while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000a50:	bf00      	nop
 8000a52:	4b79      	ldr	r3, [pc, #484]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5c:	2b40      	cmp	r3, #64	; 0x40
 8000a5e:	d1f8      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0xde>
				HAL_UART_Transmit(&huart2,(uint8_t*) newline, strlen(newline),1000);
 8000a60:	4874      	ldr	r0, [pc, #464]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a62:	f7ff fbe9 	bl	8000238 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	4971      	ldr	r1, [pc, #452]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a70:	4871      	ldr	r0, [pc, #452]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a72:	f001 ff47 	bl	8002904 <HAL_UART_Transmit>
				//=======================================================
				readytosend=0;
 8000a76:	4b6d      	ldr	r3, [pc, #436]	; (8000c2c <HAL_UART_RxCpltCallback+0x2b8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
				state=1;
 8000a7c:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <HAL_UART_RxCpltCallback+0x2bc>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
				firstTime=0;
 8000a82:	4b71      	ldr	r3, [pc, #452]	; (8000c48 <HAL_UART_RxCpltCallback+0x2d4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
		    	sendbuffer[idxbuffer++]=ch;
		    }
		}
		}
    }
}
 8000a88:	e0c7      	b.n	8000c1a <HAL_UART_RxCpltCallback+0x2a6>
				name[idx++]=ch;
 8000a8a:	4b70      	ldr	r3, [pc, #448]	; (8000c4c <HAL_UART_RxCpltCallback+0x2d8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	496e      	ldr	r1, [pc, #440]	; (8000c4c <HAL_UART_RxCpltCallback+0x2d8>)
 8000a92:	600a      	str	r2, [r1, #0]
 8000a94:	4a64      	ldr	r2, [pc, #400]	; (8000c28 <HAL_UART_RxCpltCallback+0x2b4>)
 8000a96:	7811      	ldrb	r1, [r2, #0]
 8000a98:	4a69      	ldr	r2, [pc, #420]	; (8000c40 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a9a:	54d1      	strb	r1, [r2, r3]
}
 8000a9c:	e0bd      	b.n	8000c1a <HAL_UART_RxCpltCallback+0x2a6>
		else if(state==1){
 8000a9e:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <HAL_UART_RxCpltCallback+0x2bc>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	f040 80b9 	bne.w	8000c1a <HAL_UART_RxCpltCallback+0x2a6>
		    HAL_UART_Transmit(&huart3,(uint8_t*) &ch, 1,1000);
 8000aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aac:	2201      	movs	r2, #1
 8000aae:	495e      	ldr	r1, [pc, #376]	; (8000c28 <HAL_UART_RxCpltCallback+0x2b4>)
 8000ab0:	485c      	ldr	r0, [pc, #368]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ab2:	f001 ff27 	bl	8002904 <HAL_UART_Transmit>
		    if(ch==13){
 8000ab6:	4b5c      	ldr	r3, [pc, #368]	; (8000c28 <HAL_UART_RxCpltCallback+0x2b4>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b0d      	cmp	r3, #13
 8000abc:	f040 80a4 	bne.w	8000c08 <HAL_UART_RxCpltCallback+0x294>
		    	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000ac0:	bf00      	nop
 8000ac2:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000acc:	2b40      	cmp	r3, #64	; 0x40
 8000ace:	d1f8      	bne.n	8000ac2 <HAL_UART_RxCpltCallback+0x14e>
		    	HAL_UART_Transmit(&huart3,(uint8_t*) newline, strlen(newline),1000);
 8000ad0:	4858      	ldr	r0, [pc, #352]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 8000ad2:	f7ff fbb1 	bl	8000238 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	4955      	ldr	r1, [pc, #340]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 8000ae0:	4850      	ldr	r0, [pc, #320]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ae2:	f001 ff0f 	bl	8002904 <HAL_UART_Transmit>
		    	if(sendbuffer[0]=='q' && idxbuffer==1){
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	; (8000c50 <HAL_UART_RxCpltCallback+0x2dc>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b71      	cmp	r3, #113	; 0x71
 8000aec:	d125      	bne.n	8000b3a <HAL_UART_RxCpltCallback+0x1c6>
 8000aee:	4b59      	ldr	r3, [pc, #356]	; (8000c54 <HAL_UART_RxCpltCallback+0x2e0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d121      	bne.n	8000b3a <HAL_UART_RxCpltCallback+0x1c6>
		    		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000af6:	bf00      	nop
 8000af8:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	2b40      	cmp	r3, #64	; 0x40
 8000b04:	d1f8      	bne.n	8000af8 <HAL_UART_RxCpltCallback+0x184>
		    		HAL_UART_Transmit(&huart3,(uint8_t*) "Program ended", strlen("Program ended"),1000);
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	220d      	movs	r2, #13
 8000b0c:	4952      	ldr	r1, [pc, #328]	; (8000c58 <HAL_UART_RxCpltCallback+0x2e4>)
 8000b0e:	4845      	ldr	r0, [pc, #276]	; (8000c24 <HAL_UART_RxCpltCallback+0x2b0>)
 8000b10:	f001 fef8 	bl	8002904 <HAL_UART_Transmit>
		    		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000b14:	bf00      	nop
 8000b16:	4b48      	ldr	r3, [pc, #288]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b20:	2b40      	cmp	r3, #64	; 0x40
 8000b22:	d1f8      	bne.n	8000b16 <HAL_UART_RxCpltCallback+0x1a2>
		    		HAL_UART_Transmit(&huart2,(uint8_t*) "q", 1,1000);
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	2201      	movs	r2, #1
 8000b2a:	494c      	ldr	r1, [pc, #304]	; (8000c5c <HAL_UART_RxCpltCallback+0x2e8>)
 8000b2c:	4842      	ldr	r0, [pc, #264]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b2e:	f001 fee9 	bl	8002904 <HAL_UART_Transmit>
		    		state=2;
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_UART_RxCpltCallback+0x2bc>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	701a      	strb	r2, [r3, #0]
}
 8000b38:	e06f      	b.n	8000c1a <HAL_UART_RxCpltCallback+0x2a6>
		    		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000b3a:	bf00      	nop
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	2b40      	cmp	r3, #64	; 0x40
 8000b48:	d1f8      	bne.n	8000b3c <HAL_UART_RxCpltCallback+0x1c8>
		    		HAL_UART_Transmit(&huart2,(uint8_t*) "\t", 1,1000);
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	2201      	movs	r2, #1
 8000b50:	493a      	ldr	r1, [pc, #232]	; (8000c3c <HAL_UART_RxCpltCallback+0x2c8>)
 8000b52:	4839      	ldr	r0, [pc, #228]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b54:	f001 fed6 	bl	8002904 <HAL_UART_Transmit>
		    		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000b58:	bf00      	nop
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b64:	2b40      	cmp	r3, #64	; 0x40
 8000b66:	d1f8      	bne.n	8000b5a <HAL_UART_RxCpltCallback+0x1e6>
		    		HAL_UART_Transmit(&huart2,(uint8_t*) name, strlen(name),1000);
 8000b68:	4835      	ldr	r0, [pc, #212]	; (8000c40 <HAL_UART_RxCpltCallback+0x2cc>)
 8000b6a:	f7ff fb65 	bl	8000238 <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	4932      	ldr	r1, [pc, #200]	; (8000c40 <HAL_UART_RxCpltCallback+0x2cc>)
 8000b78:	482f      	ldr	r0, [pc, #188]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b7a:	f001 fec3 	bl	8002904 <HAL_UART_Transmit>
		    		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000b7e:	bf00      	nop
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8a:	2b40      	cmp	r3, #64	; 0x40
 8000b8c:	d1f8      	bne.n	8000b80 <HAL_UART_RxCpltCallback+0x20c>
		    		HAL_UART_Transmit(&huart2,(uint8_t*) " : ", strlen(" : "),1000);
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	2203      	movs	r2, #3
 8000b94:	4932      	ldr	r1, [pc, #200]	; (8000c60 <HAL_UART_RxCpltCallback+0x2ec>)
 8000b96:	4828      	ldr	r0, [pc, #160]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000b98:	f001 feb4 	bl	8002904 <HAL_UART_Transmit>
		    		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000b9c:	bf00      	nop
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba8:	2b40      	cmp	r3, #64	; 0x40
 8000baa:	d1f8      	bne.n	8000b9e <HAL_UART_RxCpltCallback+0x22a>
		    		HAL_UART_Transmit(&huart2,(uint8_t*) sendbuffer, strlen(sendbuffer),1000);
 8000bac:	4828      	ldr	r0, [pc, #160]	; (8000c50 <HAL_UART_RxCpltCallback+0x2dc>)
 8000bae:	f7ff fb43 	bl	8000238 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	4925      	ldr	r1, [pc, #148]	; (8000c50 <HAL_UART_RxCpltCallback+0x2dc>)
 8000bbc:	481e      	ldr	r0, [pc, #120]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000bbe:	f001 fea1 	bl	8002904 <HAL_UART_Transmit>
		    		while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000bc2:	bf00      	nop
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	2b40      	cmp	r3, #64	; 0x40
 8000bd0:	d1f8      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x250>
		    		HAL_UART_Transmit(&huart2,(uint8_t*) newline, strlen(newline),1000);
 8000bd2:	4818      	ldr	r0, [pc, #96]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 8000bd4:	f7ff fb30 	bl	8000238 <strlen>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be0:	4914      	ldr	r1, [pc, #80]	; (8000c34 <HAL_UART_RxCpltCallback+0x2c0>)
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <HAL_UART_RxCpltCallback+0x2c4>)
 8000be4:	f001 fe8e 	bl	8002904 <HAL_UART_Transmit>
		    		idxbuffer=0;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_UART_RxCpltCallback+0x2e0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
		    		memset(sendbuffer,0,strlen(sendbuffer));
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <HAL_UART_RxCpltCallback+0x2dc>)
 8000bf0:	f7ff fb22 	bl	8000238 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4815      	ldr	r0, [pc, #84]	; (8000c50 <HAL_UART_RxCpltCallback+0x2dc>)
 8000bfc:	f003 fa0a 	bl	8004014 <memset>
		    		readytosend=0;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_UART_RxCpltCallback+0x2b8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	e008      	b.n	8000c1a <HAL_UART_RxCpltCallback+0x2a6>
		    	sendbuffer[idxbuffer++]=ch;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	4911      	ldr	r1, [pc, #68]	; (8000c54 <HAL_UART_RxCpltCallback+0x2e0>)
 8000c10:	600a      	str	r2, [r1, #0]
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <HAL_UART_RxCpltCallback+0x2b4>)
 8000c14:	7811      	ldrb	r1, [r2, #0]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_UART_RxCpltCallback+0x2dc>)
 8000c18:	54d1      	strb	r1, [r2, r3]
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000b4 	.word	0x200000b4
 8000c28:	20000269 	.word	0x20000269
 8000c2c:	2000026a 	.word	0x2000026a
 8000c30:	20000268 	.word	0x20000268
 8000c34:	20000000 	.word	0x20000000
 8000c38:	2000002c 	.word	0x2000002c
 8000c3c:	080040d0 	.word	0x080040d0
 8000c40:	2000013c 	.word	0x2000013c
 8000c44:	080040f4 	.word	0x080040f4
 8000c48:	2000026b 	.word	0x2000026b
 8000c4c:	20000270 	.word	0x20000270
 8000c50:	200001a0 	.word	0x200001a0
 8000c54:	20000274 	.word	0x20000274
 8000c58:	08004100 	.word	0x08004100
 8000c5c:	08004110 	.word	0x08004110
 8000c60:	080040e4 	.word	0x080040e4

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0b0      	sub	sp, #192	; 0xc0
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2290      	movs	r2, #144	; 0x90
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 f99b 	bl	8004014 <memset>
  if(huart->Instance==USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a4a      	ldr	r2, [pc, #296]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d143      	bne.n	8000d70 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 f98f 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d00:	f7ff ffb0 	bl	8000c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d04:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a41      	ldr	r2, [pc, #260]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a3b      	ldr	r2, [pc, #236]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d34:	2360      	movs	r3, #96	; 0x60
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d56:	4619      	mov	r1, r3
 8000d58:	482e      	ldr	r0, [pc, #184]	; (8000e14 <HAL_UART_MspInit+0x15c>)
 8000d5a:	f000 fb05 	bl	8001368 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2026      	movs	r0, #38	; 0x26
 8000d64:	f000 fa37 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d68:	2026      	movs	r0, #38	; 0x26
 8000d6a:	f000 fa50 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6e:	e049      	b.n	8000e04 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <HAL_UART_MspInit+0x160>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d144      	bne.n	8000e04 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f945 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000d94:	f7ff ff66 	bl	8000c64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de2:	2307      	movs	r3, #7
 8000de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dec:	4619      	mov	r1, r3
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <HAL_UART_MspInit+0x15c>)
 8000df0:	f000 faba 	bl	8001368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2027      	movs	r0, #39	; 0x27
 8000dfa:	f000 f9ec 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dfe:	2027      	movs	r0, #39	; 0x27
 8000e00:	f000 fa05 	bl	800120e <HAL_NVIC_EnableIRQ>
}
 8000e04:	bf00      	nop
 8000e06:	37c0      	adds	r7, #192	; 0xc0
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40004800 	.word	0x40004800

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f896 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <USART2_IRQHandler+0x10>)
 8000e76:	f001 fed1 	bl	8002c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000002c 	.word	0x2000002c

08000e84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <USART3_IRQHandler+0x10>)
 8000e8a:	f001 fec7 	bl	8002c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000b4 	.word	0x200000b4

08000e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ea0:	f000 fc0e 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed2:	490e      	ldr	r1, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee8:	4c0b      	ldr	r4, [pc, #44]	; (8000f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef6:	f7ff ffd7 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f003 f893 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efe:	f7ff fb21 	bl	8000544 <main>
  bx  lr    
 8000f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f10:	0800413c 	.word	0x0800413c
  ldr r2, =_sbss
 8000f14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f18:	2000027c 	.word	0x2000027c

08000f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC_IRQHandler>

08000f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f94c 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f805 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2e:	f7ff fe9f 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f967 	bl	800122a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f74:	f000 f92f 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	2000000c 	.word	0x2000000c
 8000f94:	20000008 	.word	0x20000008

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000000c 	.word	0x2000000c
 8000fbc:	20000278 	.word	0x20000278

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000278 	.word	0x20000278

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000000c 	.word	0x2000000c

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	4313      	orrs	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x40>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	05fa0000 	.word	0x05fa0000

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff29 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff3e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff31 	bl	8001084 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff feb6 	bl	8000fc0 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d008      	beq.n	8001274 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e052      	b.n	800131a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0216 	bic.w	r2, r2, #22
 8001282:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001292:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <HAL_DMA_Abort+0x62>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0208 	bic.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c4:	e013      	b.n	80012ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c6:	f7ff fe7b 	bl	8000fc0 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d90c      	bls.n	80012ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e015      	b.n	800131a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e4      	bne.n	80012c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001300:	223f      	movs	r2, #63	; 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d004      	beq.n	8001340 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e00c      	b.n	800135a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2205      	movs	r2, #5
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e175      	b.n	8001674 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8164 	bne.w	800166e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d005      	beq.n	80013be <HAL_GPIO_Init+0x56>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d130      	bne.n	8001420 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 0201 	and.w	r2, r3, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b03      	cmp	r3, #3
 800142a:	d017      	beq.n	800145c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d123      	bne.n	80014b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0203 	and.w	r2, r3, #3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80be 	beq.w	800166e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b66      	ldr	r3, [pc, #408]	; (800168c <HAL_GPIO_Init+0x324>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a65      	ldr	r2, [pc, #404]	; (800168c <HAL_GPIO_Init+0x324>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <HAL_GPIO_Init+0x324>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800150a:	4a61      	ldr	r2, [pc, #388]	; (8001690 <HAL_GPIO_Init+0x328>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_GPIO_Init+0x32c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d037      	beq.n	80015a6 <HAL_GPIO_Init+0x23e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_GPIO_Init+0x330>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d031      	beq.n	80015a2 <HAL_GPIO_Init+0x23a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a56      	ldr	r2, [pc, #344]	; (800169c <HAL_GPIO_Init+0x334>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d02b      	beq.n	800159e <HAL_GPIO_Init+0x236>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <HAL_GPIO_Init+0x338>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x232>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_GPIO_Init+0x33c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x22e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <HAL_GPIO_Init+0x340>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x22a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x344>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x348>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x34c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x350>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x21a>
 800157e:	2309      	movs	r3, #9
 8001580:	e012      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001582:	230a      	movs	r3, #10
 8001584:	e010      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001586:	2308      	movs	r3, #8
 8001588:	e00e      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800158a:	2307      	movs	r3, #7
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800158e:	2306      	movs	r3, #6
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x240>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <HAL_GPIO_Init+0x328>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c6:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ea:	4a34      	ldr	r2, [pc, #208]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_GPIO_Init+0x354>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_GPIO_Init+0x354>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_GPIO_Init+0x354>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_GPIO_Init+0x354>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f ae86 	bls.w	8001388 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40021c00 	.word	0x40021c00
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40022400 	.word	0x40022400
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f90e 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e29b      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8087 	beq.w	8001822 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001714:	4b96      	ldr	r3, [pc, #600]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b04      	cmp	r3, #4
 800171e:	d00c      	beq.n	800173a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001720:	4b93      	ldr	r3, [pc, #588]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d112      	bne.n	8001752 <HAL_RCC_OscConfig+0x62>
 800172c:	4b90      	ldr	r3, [pc, #576]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001738:	d10b      	bne.n	8001752 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173a:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06c      	beq.n	8001820 <HAL_RCC_OscConfig+0x130>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d168      	bne.n	8001820 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e275      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x7a>
 800175c:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a83      	ldr	r2, [pc, #524]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e02e      	b.n	80017c8 <HAL_RCC_OscConfig+0xd8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x9c>
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7e      	ldr	r2, [pc, #504]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7b      	ldr	r2, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xd8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0xc0>
 8001796:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a75      	ldr	r2, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a72      	ldr	r2, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xd8>
 80017b0:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6e      	ldr	r2, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6b      	ldr	r2, [pc, #428]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fbf6 	bl	8000fc0 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fbf2 	bl	8000fc0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e229      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xe8>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbe2 	bl	8000fc0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fbde 	bl	8000fc0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e215      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x110>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d069      	beq.n	8001902 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182e:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x190>
 8001846:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x17a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1e9      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	493d      	ldr	r1, [pc, #244]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e040      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d023      	beq.n	80018d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a38      	ldr	r2, [pc, #224]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff fb94 	bl	8000fc0 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fb90 	bl	8000fc0 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1c7      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4929      	ldr	r1, [pc, #164]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
 80018ce:	e018      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a26      	ldr	r2, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb70 	bl	8000fc0 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fb6c 	bl	8000fc0 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e1a3      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d038      	beq.n	8001980 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff fb4d 	bl	8000fc0 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fb49 	bl	8000fc0 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e180      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800193e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x23a>
 8001948:	e01a      	b.n	8001980 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 800194c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x280>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fb33 	bl	8000fc0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fb2f 	bl	8000fc0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d903      	bls.n	8001974 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e166      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
 8001970:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ee      	bne.n	800195e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a4 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b89      	ldr	r3, [pc, #548]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a88      	ldr	r2, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b86      	ldr	r3, [pc, #536]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b6:	4b83      	ldr	r3, [pc, #524]	; (8001bc4 <HAL_RCC_OscConfig+0x4d4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019c2:	4b80      	ldr	r3, [pc, #512]	; (8001bc4 <HAL_RCC_OscConfig+0x4d4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7f      	ldr	r2, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x4d4>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff faf7 	bl	8000fc0 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff faf3 	bl	8000fc0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e12a      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x4d4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x31a>
 80019fc:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	e02d      	b.n	8001a66 <HAL_RCC_OscConfig+0x376>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x33c>
 8001a12:	4b6b      	ldr	r3, [pc, #428]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a6a      	ldr	r2, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a67      	ldr	r2, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	e01c      	b.n	8001a66 <HAL_RCC_OscConfig+0x376>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x35e>
 8001a34:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0x376>
 8001a4e:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a5b      	ldr	r2, [pc, #364]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5a:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5e:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff faa7 	bl	8000fc0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff faa3 	bl	8000fc0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0d8      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <HAL_RCC_OscConfig+0x386>
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa91 	bl	8000fc0 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fa8d 	bl	8000fc0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0c2      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a3c      	ldr	r2, [pc, #240]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80ae 	beq.w	8001c3c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d06d      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d14b      	bne.n	8001b8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fa5e 	bl	8000fc0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff fa5a 	bl	8000fc0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e091      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	071b      	lsls	r3, r3, #28
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fa2c 	bl	8000fc0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff fa28 	bl	8000fc0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e05f      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x47c>
 8001b8a:	e057      	b.n	8001c3c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fa12 	bl	8000fc0 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fa0e 	bl	8000fc0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e045      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4b0>
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x54c>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCC_OscConfig+0x558>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d030      	beq.n	8001c38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d129      	bne.n	8001c38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d122      	bne.n	8001c38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d119      	bne.n	8001c38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10f      	bne.n	8001c38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0d0      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4b6a      	ldr	r3, [pc, #424]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d910      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b67      	ldr	r3, [pc, #412]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 020f 	bic.w	r2, r3, #15
 8001c7a:	4965      	ldr	r1, [pc, #404]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b8      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	494d      	ldr	r1, [pc, #308]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d040      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d115      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e073      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06b      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4936      	ldr	r1, [pc, #216]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d40:	f7ff f93e 	bl	8000fc0 <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7ff f93a 	bl	8000fc0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e053      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 020c 	and.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1eb      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d210      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 020f 	bic.w	r2, r3, #15
 8001d86:	4922      	ldr	r1, [pc, #136]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e032      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4916      	ldr	r1, [pc, #88]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 f821 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x1c8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1d0>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1d4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f89a 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08004114 	.word	0x08004114
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e28:	b090      	sub	sp, #64	; 0x40
 8001e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e30:	2300      	movs	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x40>
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	f200 80a1 	bhi.w	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x34>
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e5c:	e09b      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5e:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e62:	e098      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d028      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	2200      	movs	r2, #0
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	627a      	str	r2, [r7, #36]	; 0x24
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e90:	fb03 f201 	mul.w	r2, r3, r1
 8001e94:	2300      	movs	r3, #0
 8001e96:	fb00 f303 	mul.w	r3, r0, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a43      	ldr	r2, [pc, #268]	; (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eaa:	4413      	add	r3, r2
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	61fa      	str	r2, [r7, #28]
 8001eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ebe:	f7fe f9c3 	bl	8000248 <__aeabi_uldivmod>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eca:	e053      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	617a      	str	r2, [r7, #20]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ede:	f04f 0b00 	mov.w	fp, #0
 8001ee2:	4652      	mov	r2, sl
 8001ee4:	465b      	mov	r3, fp
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	0159      	lsls	r1, r3, #5
 8001ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef4:	0150      	lsls	r0, r2, #5
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	ebb2 080a 	subs.w	r8, r2, sl
 8001efe:	eb63 090b 	sbc.w	r9, r3, fp
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f16:	ebb2 0408 	subs.w	r4, r2, r8
 8001f1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	00eb      	lsls	r3, r5, #3
 8001f28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f2c:	00e2      	lsls	r2, r4, #3
 8001f2e:	4614      	mov	r4, r2
 8001f30:	461d      	mov	r5, r3
 8001f32:	eb14 030a 	adds.w	r3, r4, sl
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	eb45 030b 	adc.w	r3, r5, fp
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	028b      	lsls	r3, r1, #10
 8001f4e:	4621      	mov	r1, r4
 8001f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f54:	4621      	mov	r1, r4
 8001f56:	028a      	lsls	r2, r1, #10
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	60fa      	str	r2, [r7, #12]
 8001f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f68:	f7fe f96e 	bl	8000248 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3740      	adds	r7, #64	; 0x40
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	017d7840 	.word	0x017d7840

08001fb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0a9b      	lsrs	r3, r3, #10
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08004124 	.word	0x08004124

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08004124 	.word	0x08004124

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d012      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002040:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a68      	ldr	r2, [pc, #416]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002046:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800204a:	6093      	str	r3, [r2, #8]
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	4964      	ldr	r1, [pc, #400]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d017      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	4959      	ldr	r1, [pc, #356]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d017      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	494a      	ldr	r1, [pc, #296]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020cc:	d101      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 808b 	beq.w	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6413      	str	r3, [r2, #64]	; 0x40
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a34      	ldr	r2, [pc, #208]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002120:	f7fe ff4e 	bl	8000fc0 <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe ff4a 	bl	8000fc0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e38f      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002146:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d035      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d02e      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d114      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe ff12 	bl	8000fc0 <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe ff0e 	bl	8000fc0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e351      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0ee      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ce:	d111      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021de:	400b      	ands	r3, r1
 80021e0:	4901      	ldr	r1, [pc, #4]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
 80021e6:	e00b      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000
 80021f0:	0ffffcff 	.word	0x0ffffcff
 80021f4:	4bac      	ldr	r3, [pc, #688]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4aab      	ldr	r2, [pc, #684]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021fe:	6093      	str	r3, [r2, #8]
 8002200:	4ba9      	ldr	r3, [pc, #676]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	49a6      	ldr	r1, [pc, #664]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	4313      	orrs	r3, r2
 8002210:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d010      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800221e:	4ba2      	ldr	r3, [pc, #648]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002224:	4aa0      	ldr	r2, [pc, #640]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800222e:	4b9e      	ldr	r3, [pc, #632]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002230:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	499b      	ldr	r1, [pc, #620]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224c:	4b96      	ldr	r3, [pc, #600]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800225a:	4993      	ldr	r1, [pc, #588]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226e:	4b8e      	ldr	r3, [pc, #568]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800227c:	498a      	ldr	r1, [pc, #552]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002290:	4b85      	ldr	r3, [pc, #532]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229e:	4982      	ldr	r1, [pc, #520]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4979      	ldr	r1, [pc, #484]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d4:	4b74      	ldr	r3, [pc, #464]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4971      	ldr	r1, [pc, #452]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022f6:	4b6c      	ldr	r3, [pc, #432]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f023 020c 	bic.w	r2, r3, #12
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	4968      	ldr	r1, [pc, #416]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002318:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	4960      	ldr	r1, [pc, #384]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	4957      	ldr	r1, [pc, #348]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	494f      	ldr	r1, [pc, #316]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800237e:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	4946      	ldr	r1, [pc, #280]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	493e      	ldr	r1, [pc, #248]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	4935      	ldr	r1, [pc, #212]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f2:	492d      	ldr	r1, [pc, #180]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d011      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002414:	4924      	ldr	r1, [pc, #144]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002454:	4914      	ldr	r1, [pc, #80]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002478:	490b      	ldr	r1, [pc, #44]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249c:	4902      	ldr	r1, [pc, #8]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024a4:	e002      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024b8:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	4986      	ldr	r1, [pc, #536]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024dc:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ec:	497d      	ldr	r1, [pc, #500]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d006      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80d6 	beq.w	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002508:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fd54 	bl	8000fc0 <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800251c:	f7fe fd50 	bl	8000fc0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e195      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800252e:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d021      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11d      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800255c:	4b61      	ldr	r3, [pc, #388]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002562:	0e1b      	lsrs	r3, r3, #24
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	019a      	lsls	r2, r3, #6
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	071b      	lsls	r3, r3, #28
 8002582:	4958      	ldr	r1, [pc, #352]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d02e      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b4:	d129      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025b6:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025c4:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	0f1b      	lsrs	r3, r3, #28
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	019a      	lsls	r2, r3, #6
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	431a      	orrs	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	493e      	ldr	r1, [pc, #248]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80025f2:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f8:	f023 021f 	bic.w	r2, r3, #31
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	3b01      	subs	r3, #1
 8002602:	4938      	ldr	r1, [pc, #224]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01d      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002616:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800261c:	0e1b      	lsrs	r3, r3, #24
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002624:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262a:	0f1b      	lsrs	r3, r3, #28
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	019a      	lsls	r2, r3, #6
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	431a      	orrs	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	071b      	lsls	r3, r3, #28
 800264a:	4926      	ldr	r1, [pc, #152]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d011      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	019a      	lsls	r2, r3, #6
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	071b      	lsls	r3, r3, #28
 800267a:	491a      	ldr	r1, [pc, #104]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800268c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268e:	f7fe fc97 	bl	8000fc0 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002696:	f7fe fc93 	bl	8000fc0 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	; 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0d8      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 80ce 	bne.w	8002858 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c8:	f7fe fc7a 	bl	8000fc0 <HAL_GetTick>
 80026cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026ce:	e00b      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026d0:	f7fe fc76 	bl	8000fc0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d904      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0bb      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026e8:	4b5e      	ldr	r3, [pc, #376]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f4:	d0ec      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02e      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12a      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800271e:	4b51      	ldr	r3, [pc, #324]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800272c:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	0f1b      	lsrs	r3, r3, #28
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	019a      	lsls	r2, r3, #6
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	041b      	lsls	r3, r3, #16
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	061b      	lsls	r3, r3, #24
 800274c:	431a      	orrs	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	071b      	lsls	r3, r3, #28
 8002752:	4944      	ldr	r1, [pc, #272]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800275a:	4b42      	ldr	r3, [pc, #264]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800275c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002760:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	493d      	ldr	r1, [pc, #244]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d022      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002788:	d11d      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	0e1b      	lsrs	r3, r3, #24
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002798:	4b32      	ldr	r3, [pc, #200]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	0f1b      	lsrs	r3, r3, #28
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	019a      	lsls	r2, r3, #6
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	071b      	lsls	r3, r3, #28
 80027be:	4929      	ldr	r1, [pc, #164]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d028      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	0e1b      	lsrs	r3, r3, #24
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	019a      	lsls	r2, r3, #6
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	071b      	lsls	r3, r3, #28
 8002806:	4917      	ldr	r1, [pc, #92]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	4911      	ldr	r1, [pc, #68]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002830:	f7fe fbc6 	bl	8000fc0 <HAL_GetTick>
 8002834:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002838:	f7fe fbc2 	bl	8000fc0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e007      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002856:	d1ef      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e040      	b.n	80028fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fa14 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fcca 	bl	8003240 <UART_SetConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e022      	b.n	80028fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 ff22 	bl	8003708 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 ffa9 	bl	800384c <UART_CheckIdleState>
 80028fa:	4603      	mov	r3, r0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002918:	2b20      	cmp	r3, #32
 800291a:	d171      	bne.n	8002a00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Transmit+0x24>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e06a      	b.n	8002a02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2221      	movs	r2, #33	; 0x21
 8002938:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800293a:	f7fe fb41 	bl	8000fc0 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	88fa      	ldrh	r2, [r7, #6]
 800294c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d108      	bne.n	800296c <HAL_UART_Transmit+0x68>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e003      	b.n	8002974 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002974:	e02c      	b.n	80029d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 ffb0 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e038      	b.n	8002a02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3302      	adds	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e007      	b.n	80029be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1cc      	bne.n	8002976 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2140      	movs	r1, #64	; 0x40
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 ff7d 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e005      	b.n	8002a02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
  }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b08a      	sub	sp, #40	; 0x28
 8002a0e:	af02      	add	r7, sp, #8
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	f040 80b1 	bne.w	8002b88 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_UART_Receive+0x28>
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0a9      	b.n	8002b8a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2222      	movs	r2, #34	; 0x22
 8002a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fab8 	bl	8000fc0 <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d10e      	bne.n	8002a8a <HAL_UART_Receive+0x80>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_UART_Receive+0x76>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a7e:	e02d      	b.n	8002adc <HAL_UART_Receive+0xd2>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a88:	e028      	b.n	8002adc <HAL_UART_Receive+0xd2>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_UART_Receive+0xa4>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <HAL_UART_Receive+0x9a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	22ff      	movs	r2, #255	; 0xff
 8002a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aa2:	e01b      	b.n	8002adc <HAL_UART_Receive+0xd2>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	227f      	movs	r2, #127	; 0x7f
 8002aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aac:	e016      	b.n	8002adc <HAL_UART_Receive+0xd2>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_UART_Receive+0xca>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_UART_Receive+0xc0>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	227f      	movs	r2, #127	; 0x7f
 8002ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ac8:	e008      	b.n	8002adc <HAL_UART_Receive+0xd2>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	223f      	movs	r2, #63	; 0x3f
 8002ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ad2:	e003      	b.n	8002adc <HAL_UART_Receive+0xd2>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ae2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aec:	d108      	bne.n	8002b00 <HAL_UART_Receive+0xf6>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d104      	bne.n	8002b00 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	e003      	b.n	8002b08 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b08:	e032      	b.n	8002b70 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2120      	movs	r1, #32
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fee6 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e032      	b.n	8002b8a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	8a7b      	ldrh	r3, [r7, #18]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	3302      	adds	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	e00c      	b.n	8002b5e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	8a7b      	ldrh	r3, [r7, #18]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4013      	ands	r3, r2
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1c6      	bne.n	8002b0a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b08a      	sub	sp, #40	; 0x28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d132      	bne.n	8002c10 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Receive_IT+0x24>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e02b      	b.n	8002c12 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	613b      	str	r3, [r7, #16]
   return(result);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	69f9      	ldr	r1, [r7, #28]
 8002bf2:	6a3a      	ldr	r2, [r7, #32]
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e6      	bne.n	8002bce <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 ff34 	bl	8003a74 <UART_Start_Receive_IT>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	e000      	b.n	8002c12 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3728      	adds	r7, #40	; 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b0ba      	sub	sp, #232	; 0xe8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c46:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d115      	bne.n	8002c84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00f      	beq.n	8002c84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 82ac 	beq.w	80031d2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
      }
      return;
 8002c82:	e2a6      	b.n	80031d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8117 	beq.w	8002ebc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c9e:	4b85      	ldr	r3, [pc, #532]	; (8002eb4 <HAL_UART_IRQHandler+0x298>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 810a 	beq.w	8002ebc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d011      	beq.n	8002cd8 <HAL_UART_IRQHandler+0xbc>
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d011      	beq.n	8002d08 <HAL_UART_IRQHandler+0xec>
 8002ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d011      	beq.n	8002d38 <HAL_UART_IRQHandler+0x11c>
 8002d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2204      	movs	r2, #4
 8002d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2e:	f043 0202 	orr.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d017      	beq.n	8002d74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2208      	movs	r2, #8
 8002d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6a:	f043 0208 	orr.w	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <HAL_UART_IRQHandler+0x18a>
 8002d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8212 	beq.w	80031d6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d005      	beq.n	8002dfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04f      	beq.n	8002e9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fefe 	bl	8003c00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	d141      	bne.n	8002e96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3308      	adds	r3, #8
 8002e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1d9      	bne.n	8002e12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d013      	beq.n	8002e8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_UART_IRQHandler+0x29c>)
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fa55 	bl	8001322 <HAL_DMA_Abort_IT>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d017      	beq.n	8002eae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	e00f      	b.n	8002eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9b6 	bl	8003200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	e00b      	b.n	8002eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9b2 	bl	8003200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	e007      	b.n	8002eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9ae 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002eac:	e193      	b.n	80031d6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eae:	bf00      	nop
    return;
 8002eb0:	e191      	b.n	80031d6 <HAL_UART_IRQHandler+0x5ba>
 8002eb2:	bf00      	nop
 8002eb4:	04000120 	.word	0x04000120
 8002eb8:	08003cc9 	.word	0x08003cc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	f040 814c 	bne.w	800315e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8145 	beq.w	800315e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 813e 	beq.w	800315e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	f040 80b6 	bne.w	8003066 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8165 	beq.w	80031da <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f080 815d 	bcs.w	80031da <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f34:	f000 8086 	beq.w	8003044 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1da      	bne.n	8002f38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3308      	adds	r3, #8
 8002f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e1      	bne.n	8002f82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e3      	bne.n	8002fbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003014:	f023 0310 	bic.w	r3, r3, #16
 8003018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003026:	65bb      	str	r3, [r7, #88]	; 0x58
 8003028:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800302c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e4      	bne.n	8003004 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe f8ff 	bl	8001242 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003056:	b29b      	uxth	r3, r3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	b29b      	uxth	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8d8 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003064:	e0b9      	b.n	80031da <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003072:	b29b      	uxth	r3, r3
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80ab 	beq.w	80031de <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a6 	beq.w	80031de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e4      	bne.n	8003092 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3308      	adds	r3, #8
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	623b      	str	r3, [r7, #32]
   return(result);
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030ec:	633a      	str	r2, [r7, #48]	; 0x30
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e3      	bne.n	80030c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	60fb      	str	r3, [r7, #12]
   return(result);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f023 0310 	bic.w	r3, r3, #16
 8003128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	617b      	str	r3, [r7, #20]
   return(result);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f85c 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800315c:	e03f      	b.n	80031de <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800315e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <HAL_UART_IRQHandler+0x56c>
 800316a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800317e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f853 	bl	800322c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003186:	e02d      	b.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01c      	beq.n	80031e2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
    }
    return;
 80031b0:	e017      	b.n	80031e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d012      	beq.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
 80031be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fd92 	bl	8003cf4 <UART_EndTransmit_IT>
    return;
 80031d0:	e008      	b.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80031d2:	bf00      	nop
 80031d4:	e006      	b.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80031d6:	bf00      	nop
 80031d8:	e004      	b.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80031da:	bf00      	nop
 80031dc:	e002      	b.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80031e2:	bf00      	nop
  }

}
 80031e4:	37e8      	adds	r7, #232	; 0xe8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop

080031ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4ba6      	ldr	r3, [pc, #664]	; (8003504 <UART_SetConfig+0x2c4>)
 800326c:	4013      	ands	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	6979      	ldr	r1, [r7, #20]
 8003274:	430b      	orrs	r3, r1
 8003276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a94      	ldr	r2, [pc, #592]	; (8003508 <UART_SetConfig+0x2c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d120      	bne.n	80032fe <UART_SetConfig+0xbe>
 80032bc:	4b93      	ldr	r3, [pc, #588]	; (800350c <UART_SetConfig+0x2cc>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d816      	bhi.n	80032f8 <UART_SetConfig+0xb8>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x90>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032ed 	.word	0x080032ed
 80032d8:	080032e7 	.word	0x080032e7
 80032dc:	080032f3 	.word	0x080032f3
 80032e0:	2301      	movs	r3, #1
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e150      	b.n	8003588 <UART_SetConfig+0x348>
 80032e6:	2302      	movs	r3, #2
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e14d      	b.n	8003588 <UART_SetConfig+0x348>
 80032ec:	2304      	movs	r3, #4
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e14a      	b.n	8003588 <UART_SetConfig+0x348>
 80032f2:	2308      	movs	r3, #8
 80032f4:	77fb      	strb	r3, [r7, #31]
 80032f6:	e147      	b.n	8003588 <UART_SetConfig+0x348>
 80032f8:	2310      	movs	r3, #16
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e144      	b.n	8003588 <UART_SetConfig+0x348>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a83      	ldr	r2, [pc, #524]	; (8003510 <UART_SetConfig+0x2d0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d132      	bne.n	800336e <UART_SetConfig+0x12e>
 8003308:	4b80      	ldr	r3, [pc, #512]	; (800350c <UART_SetConfig+0x2cc>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d828      	bhi.n	8003368 <UART_SetConfig+0x128>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <UART_SetConfig+0xdc>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	08003351 	.word	0x08003351
 8003320:	08003369 	.word	0x08003369
 8003324:	08003369 	.word	0x08003369
 8003328:	08003369 	.word	0x08003369
 800332c:	0800335d 	.word	0x0800335d
 8003330:	08003369 	.word	0x08003369
 8003334:	08003369 	.word	0x08003369
 8003338:	08003369 	.word	0x08003369
 800333c:	08003357 	.word	0x08003357
 8003340:	08003369 	.word	0x08003369
 8003344:	08003369 	.word	0x08003369
 8003348:	08003369 	.word	0x08003369
 800334c:	08003363 	.word	0x08003363
 8003350:	2300      	movs	r3, #0
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e118      	b.n	8003588 <UART_SetConfig+0x348>
 8003356:	2302      	movs	r3, #2
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e115      	b.n	8003588 <UART_SetConfig+0x348>
 800335c:	2304      	movs	r3, #4
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e112      	b.n	8003588 <UART_SetConfig+0x348>
 8003362:	2308      	movs	r3, #8
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e10f      	b.n	8003588 <UART_SetConfig+0x348>
 8003368:	2310      	movs	r3, #16
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e10c      	b.n	8003588 <UART_SetConfig+0x348>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a68      	ldr	r2, [pc, #416]	; (8003514 <UART_SetConfig+0x2d4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d120      	bne.n	80033ba <UART_SetConfig+0x17a>
 8003378:	4b64      	ldr	r3, [pc, #400]	; (800350c <UART_SetConfig+0x2cc>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	d013      	beq.n	80033ae <UART_SetConfig+0x16e>
 8003386:	2b30      	cmp	r3, #48	; 0x30
 8003388:	d814      	bhi.n	80033b4 <UART_SetConfig+0x174>
 800338a:	2b20      	cmp	r3, #32
 800338c:	d009      	beq.n	80033a2 <UART_SetConfig+0x162>
 800338e:	2b20      	cmp	r3, #32
 8003390:	d810      	bhi.n	80033b4 <UART_SetConfig+0x174>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <UART_SetConfig+0x15c>
 8003396:	2b10      	cmp	r3, #16
 8003398:	d006      	beq.n	80033a8 <UART_SetConfig+0x168>
 800339a:	e00b      	b.n	80033b4 <UART_SetConfig+0x174>
 800339c:	2300      	movs	r3, #0
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e0f2      	b.n	8003588 <UART_SetConfig+0x348>
 80033a2:	2302      	movs	r3, #2
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e0ef      	b.n	8003588 <UART_SetConfig+0x348>
 80033a8:	2304      	movs	r3, #4
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e0ec      	b.n	8003588 <UART_SetConfig+0x348>
 80033ae:	2308      	movs	r3, #8
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e0e9      	b.n	8003588 <UART_SetConfig+0x348>
 80033b4:	2310      	movs	r3, #16
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e0e6      	b.n	8003588 <UART_SetConfig+0x348>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a56      	ldr	r2, [pc, #344]	; (8003518 <UART_SetConfig+0x2d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d120      	bne.n	8003406 <UART_SetConfig+0x1c6>
 80033c4:	4b51      	ldr	r3, [pc, #324]	; (800350c <UART_SetConfig+0x2cc>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ce:	2bc0      	cmp	r3, #192	; 0xc0
 80033d0:	d013      	beq.n	80033fa <UART_SetConfig+0x1ba>
 80033d2:	2bc0      	cmp	r3, #192	; 0xc0
 80033d4:	d814      	bhi.n	8003400 <UART_SetConfig+0x1c0>
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d009      	beq.n	80033ee <UART_SetConfig+0x1ae>
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d810      	bhi.n	8003400 <UART_SetConfig+0x1c0>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <UART_SetConfig+0x1a8>
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d006      	beq.n	80033f4 <UART_SetConfig+0x1b4>
 80033e6:	e00b      	b.n	8003400 <UART_SetConfig+0x1c0>
 80033e8:	2300      	movs	r3, #0
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e0cc      	b.n	8003588 <UART_SetConfig+0x348>
 80033ee:	2302      	movs	r3, #2
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e0c9      	b.n	8003588 <UART_SetConfig+0x348>
 80033f4:	2304      	movs	r3, #4
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e0c6      	b.n	8003588 <UART_SetConfig+0x348>
 80033fa:	2308      	movs	r3, #8
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e0c3      	b.n	8003588 <UART_SetConfig+0x348>
 8003400:	2310      	movs	r3, #16
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e0c0      	b.n	8003588 <UART_SetConfig+0x348>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a44      	ldr	r2, [pc, #272]	; (800351c <UART_SetConfig+0x2dc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d125      	bne.n	800345c <UART_SetConfig+0x21c>
 8003410:	4b3e      	ldr	r3, [pc, #248]	; (800350c <UART_SetConfig+0x2cc>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800341e:	d017      	beq.n	8003450 <UART_SetConfig+0x210>
 8003420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003424:	d817      	bhi.n	8003456 <UART_SetConfig+0x216>
 8003426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342a:	d00b      	beq.n	8003444 <UART_SetConfig+0x204>
 800342c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003430:	d811      	bhi.n	8003456 <UART_SetConfig+0x216>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <UART_SetConfig+0x1fe>
 8003436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343a:	d006      	beq.n	800344a <UART_SetConfig+0x20a>
 800343c:	e00b      	b.n	8003456 <UART_SetConfig+0x216>
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e0a1      	b.n	8003588 <UART_SetConfig+0x348>
 8003444:	2302      	movs	r3, #2
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e09e      	b.n	8003588 <UART_SetConfig+0x348>
 800344a:	2304      	movs	r3, #4
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e09b      	b.n	8003588 <UART_SetConfig+0x348>
 8003450:	2308      	movs	r3, #8
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e098      	b.n	8003588 <UART_SetConfig+0x348>
 8003456:	2310      	movs	r3, #16
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e095      	b.n	8003588 <UART_SetConfig+0x348>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <UART_SetConfig+0x2e0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d125      	bne.n	80034b2 <UART_SetConfig+0x272>
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <UART_SetConfig+0x2cc>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003470:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003474:	d017      	beq.n	80034a6 <UART_SetConfig+0x266>
 8003476:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800347a:	d817      	bhi.n	80034ac <UART_SetConfig+0x26c>
 800347c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003480:	d00b      	beq.n	800349a <UART_SetConfig+0x25a>
 8003482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003486:	d811      	bhi.n	80034ac <UART_SetConfig+0x26c>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <UART_SetConfig+0x254>
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	d006      	beq.n	80034a0 <UART_SetConfig+0x260>
 8003492:	e00b      	b.n	80034ac <UART_SetConfig+0x26c>
 8003494:	2301      	movs	r3, #1
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e076      	b.n	8003588 <UART_SetConfig+0x348>
 800349a:	2302      	movs	r3, #2
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e073      	b.n	8003588 <UART_SetConfig+0x348>
 80034a0:	2304      	movs	r3, #4
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e070      	b.n	8003588 <UART_SetConfig+0x348>
 80034a6:	2308      	movs	r3, #8
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e06d      	b.n	8003588 <UART_SetConfig+0x348>
 80034ac:	2310      	movs	r3, #16
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e06a      	b.n	8003588 <UART_SetConfig+0x348>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <UART_SetConfig+0x2e4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d138      	bne.n	800352e <UART_SetConfig+0x2ee>
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <UART_SetConfig+0x2cc>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ca:	d017      	beq.n	80034fc <UART_SetConfig+0x2bc>
 80034cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034d0:	d82a      	bhi.n	8003528 <UART_SetConfig+0x2e8>
 80034d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d6:	d00b      	beq.n	80034f0 <UART_SetConfig+0x2b0>
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d824      	bhi.n	8003528 <UART_SetConfig+0x2e8>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <UART_SetConfig+0x2aa>
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e6:	d006      	beq.n	80034f6 <UART_SetConfig+0x2b6>
 80034e8:	e01e      	b.n	8003528 <UART_SetConfig+0x2e8>
 80034ea:	2300      	movs	r3, #0
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e04b      	b.n	8003588 <UART_SetConfig+0x348>
 80034f0:	2302      	movs	r3, #2
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e048      	b.n	8003588 <UART_SetConfig+0x348>
 80034f6:	2304      	movs	r3, #4
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e045      	b.n	8003588 <UART_SetConfig+0x348>
 80034fc:	2308      	movs	r3, #8
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e042      	b.n	8003588 <UART_SetConfig+0x348>
 8003502:	bf00      	nop
 8003504:	efff69f3 	.word	0xefff69f3
 8003508:	40011000 	.word	0x40011000
 800350c:	40023800 	.word	0x40023800
 8003510:	40004400 	.word	0x40004400
 8003514:	40004800 	.word	0x40004800
 8003518:	40004c00 	.word	0x40004c00
 800351c:	40005000 	.word	0x40005000
 8003520:	40011400 	.word	0x40011400
 8003524:	40007800 	.word	0x40007800
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e02c      	b.n	8003588 <UART_SetConfig+0x348>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a72      	ldr	r2, [pc, #456]	; (80036fc <UART_SetConfig+0x4bc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d125      	bne.n	8003584 <UART_SetConfig+0x344>
 8003538:	4b71      	ldr	r3, [pc, #452]	; (8003700 <UART_SetConfig+0x4c0>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003542:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003546:	d017      	beq.n	8003578 <UART_SetConfig+0x338>
 8003548:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800354c:	d817      	bhi.n	800357e <UART_SetConfig+0x33e>
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003552:	d00b      	beq.n	800356c <UART_SetConfig+0x32c>
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003558:	d811      	bhi.n	800357e <UART_SetConfig+0x33e>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <UART_SetConfig+0x326>
 800355e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003562:	d006      	beq.n	8003572 <UART_SetConfig+0x332>
 8003564:	e00b      	b.n	800357e <UART_SetConfig+0x33e>
 8003566:	2300      	movs	r3, #0
 8003568:	77fb      	strb	r3, [r7, #31]
 800356a:	e00d      	b.n	8003588 <UART_SetConfig+0x348>
 800356c:	2302      	movs	r3, #2
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e00a      	b.n	8003588 <UART_SetConfig+0x348>
 8003572:	2304      	movs	r3, #4
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e007      	b.n	8003588 <UART_SetConfig+0x348>
 8003578:	2308      	movs	r3, #8
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e004      	b.n	8003588 <UART_SetConfig+0x348>
 800357e:	2310      	movs	r3, #16
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e001      	b.n	8003588 <UART_SetConfig+0x348>
 8003584:	2310      	movs	r3, #16
 8003586:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003590:	d15b      	bne.n	800364a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d828      	bhi.n	80035ea <UART_SetConfig+0x3aa>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <UART_SetConfig+0x360>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035cd 	.word	0x080035cd
 80035a8:	080035d5 	.word	0x080035d5
 80035ac:	080035eb 	.word	0x080035eb
 80035b0:	080035db 	.word	0x080035db
 80035b4:	080035eb 	.word	0x080035eb
 80035b8:	080035eb 	.word	0x080035eb
 80035bc:	080035eb 	.word	0x080035eb
 80035c0:	080035e3 	.word	0x080035e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c4:	f7fe fd00 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 80035c8:	61b8      	str	r0, [r7, #24]
        break;
 80035ca:	e013      	b.n	80035f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035cc:	f7fe fd10 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 80035d0:	61b8      	str	r0, [r7, #24]
        break;
 80035d2:	e00f      	b.n	80035f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <UART_SetConfig+0x4c4>)
 80035d6:	61bb      	str	r3, [r7, #24]
        break;
 80035d8:	e00c      	b.n	80035f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035da:	f7fe fc23 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 80035de:	61b8      	str	r0, [r7, #24]
        break;
 80035e0:	e008      	b.n	80035f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e6:	61bb      	str	r3, [r7, #24]
        break;
 80035e8:	e004      	b.n	80035f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77bb      	strb	r3, [r7, #30]
        break;
 80035f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d074      	beq.n	80036e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	005a      	lsls	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	441a      	add	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b0f      	cmp	r3, #15
 8003614:	d916      	bls.n	8003644 <UART_SetConfig+0x404>
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d212      	bcs.n	8003644 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f023 030f 	bic.w	r3, r3, #15
 8003626:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	b29b      	uxth	r3, r3
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	b29a      	uxth	r2, r3
 8003634:	89fb      	ldrh	r3, [r7, #14]
 8003636:	4313      	orrs	r3, r2
 8003638:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	89fa      	ldrh	r2, [r7, #14]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	e04f      	b.n	80036e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	77bb      	strb	r3, [r7, #30]
 8003648:	e04c      	b.n	80036e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800364a:	7ffb      	ldrb	r3, [r7, #31]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d828      	bhi.n	80036a2 <UART_SetConfig+0x462>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <UART_SetConfig+0x418>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800367d 	.word	0x0800367d
 800365c:	08003685 	.word	0x08003685
 8003660:	0800368d 	.word	0x0800368d
 8003664:	080036a3 	.word	0x080036a3
 8003668:	08003693 	.word	0x08003693
 800366c:	080036a3 	.word	0x080036a3
 8003670:	080036a3 	.word	0x080036a3
 8003674:	080036a3 	.word	0x080036a3
 8003678:	0800369b 	.word	0x0800369b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800367c:	f7fe fca4 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8003680:	61b8      	str	r0, [r7, #24]
        break;
 8003682:	e013      	b.n	80036ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003684:	f7fe fcb4 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003688:	61b8      	str	r0, [r7, #24]
        break;
 800368a:	e00f      	b.n	80036ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <UART_SetConfig+0x4c4>)
 800368e:	61bb      	str	r3, [r7, #24]
        break;
 8003690:	e00c      	b.n	80036ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003692:	f7fe fbc7 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8003696:	61b8      	str	r0, [r7, #24]
        break;
 8003698:	e008      	b.n	80036ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369e:	61bb      	str	r3, [r7, #24]
        break;
 80036a0:	e004      	b.n	80036ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	77bb      	strb	r3, [r7, #30]
        break;
 80036aa:	bf00      	nop
    }

    if (pclk != 0U)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d018      	beq.n	80036e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	085a      	lsrs	r2, r3, #1
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	441a      	add	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b0f      	cmp	r3, #15
 80036ca:	d909      	bls.n	80036e0 <UART_SetConfig+0x4a0>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d2:	d205      	bcs.n	80036e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	e001      	b.n	80036e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40007c00 	.word	0x40007c00
 8003700:	40023800 	.word	0x40023800
 8003704:	00f42400 	.word	0x00f42400

08003708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01a      	beq.n	800381e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003806:	d10a      	bne.n	800381e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af02      	add	r7, sp, #8
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800385c:	f7fd fbb0 	bl	8000fc0 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b08      	cmp	r3, #8
 800386e:	d10e      	bne.n	800388e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f831 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e027      	b.n	80038de <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b04      	cmp	r3, #4
 800389a:	d10e      	bne.n	80038ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800389c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f81b 	bl	80038e6 <UART_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e011      	b.n	80038de <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b09c      	sub	sp, #112	; 0x70
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f6:	e0a7      	b.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fe:	f000 80a3 	beq.w	8003a48 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fd fb5d 	bl	8000fc0 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <UART_WaitOnFlagUntilTimeout+0x32>
 8003912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003914:	2b00      	cmp	r3, #0
 8003916:	d13f      	bne.n	8003998 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800392c:	667b      	str	r3, [r7, #100]	; 0x64
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003938:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800393c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e6      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	663b      	str	r3, [r7, #96]	; 0x60
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800396a:	64ba      	str	r2, [r7, #72]	; 0x48
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e5      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e068      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d050      	beq.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b4:	d148      	bne.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
 80039e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e6      	bne.n	80039c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	613b      	str	r3, [r7, #16]
   return(result);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3308      	adds	r3, #8
 8003a10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a12:	623a      	str	r2, [r7, #32]
 8003a14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	69f9      	ldr	r1, [r7, #28]
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e5      	bne.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e010      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4013      	ands	r3, r2
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	f43f af48 	beq.w	80038f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3770      	adds	r7, #112	; 0x70
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b097      	sub	sp, #92	; 0x5c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	d10e      	bne.n	8003ac6 <UART_Start_Receive_IT+0x52>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <UART_Start_Receive_IT+0x48>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ab6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003aba:	e02d      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ac4:	e028      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <UART_Start_Receive_IT+0x76>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <UART_Start_Receive_IT+0x6c>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	22ff      	movs	r2, #255	; 0xff
 8003ada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ade:	e01b      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	227f      	movs	r2, #127	; 0x7f
 8003ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ae8:	e016      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d10d      	bne.n	8003b10 <UART_Start_Receive_IT+0x9c>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <UART_Start_Receive_IT+0x92>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	227f      	movs	r2, #127	; 0x7f
 8003b00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b04:	e008      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	223f      	movs	r2, #63	; 0x3f
 8003b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b0e:	e003      	b.n	8003b18 <UART_Start_Receive_IT+0xa4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2222      	movs	r2, #34	; 0x22
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3308      	adds	r3, #8
 8003b46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b48:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d107      	bne.n	8003b76 <UART_Start_Receive_IT+0x102>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <UART_Start_Receive_IT+0x184>)
 8003b72:	669a      	str	r2, [r3, #104]	; 0x68
 8003b74:	e002      	b.n	8003b7c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <UART_Start_Receive_IT+0x188>)
 8003b7a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d019      	beq.n	8003bb8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e6      	bne.n	8003b84 <UART_Start_Receive_IT+0x110>
 8003bb6:	e018      	b.n	8003bea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f043 0320 	orr.w	r3, r3, #32
 8003bcc:	653b      	str	r3, [r7, #80]	; 0x50
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	375c      	adds	r7, #92	; 0x5c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	08003eaf 	.word	0x08003eaf
 8003bfc:	08003d49 	.word	0x08003d49

08003c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b095      	sub	sp, #84	; 0x54
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	643b      	str	r3, [r7, #64]	; 0x40
 8003c28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d118      	bne.n	8003ca8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e6      	bne.n	8003c76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cbc:	bf00      	nop
 8003cbe:	3754      	adds	r7, #84	; 0x54
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fa8a 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	613b      	str	r3, [r7, #16]
   return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fa56 	bl	80031ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d40:	bf00      	nop
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b096      	sub	sp, #88	; 0x58
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d56:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d60:	2b22      	cmp	r3, #34	; 0x22
 8003d62:	f040 8098 	bne.w	8003e96 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d74:	b2d9      	uxtb	r1, r3
 8003d76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	400a      	ands	r2, r1
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d17b      	bne.n	8003ea6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e6      	bne.n	8003dae <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3308      	adds	r3, #8
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	623b      	str	r3, [r7, #32]
   return(result);
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e00:	633a      	str	r2, [r7, #48]	; 0x30
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d12e      	bne.n	8003e8e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0310 	bic.w	r3, r3, #16
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	617b      	str	r3, [r7, #20]
   return(result);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e6      	bne.n	8003e36 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d103      	bne.n	8003e7e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff f9c4 	bl	8003214 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e8c:	e00b      	b.n	8003ea6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fc fd70 	bl	8000974 <HAL_UART_RxCpltCallback>
}
 8003e94:	e007      	b.n	8003ea6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0208 	orr.w	r2, r2, #8
 8003ea4:	619a      	str	r2, [r3, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	3758      	adds	r7, #88	; 0x58
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b096      	sub	sp, #88	; 0x58
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ebc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec6:	2b22      	cmp	r3, #34	; 0x22
 8003ec8:	f040 8098 	bne.w	8003ffc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003edc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ee0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	1c9a      	adds	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d17b      	bne.n	800400c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40
 8003f34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e6      	bne.n	8003f14 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e5      	bne.n	8003f46 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d12e      	bne.n	8003ff4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6979      	ldr	r1, [r7, #20]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e6      	bne.n	8003f9c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d103      	bne.n	8003fe4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff f911 	bl	8003214 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ff2:	e00b      	b.n	800400c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fc fcbd 	bl	8000974 <HAL_UART_RxCpltCallback>
}
 8003ffa:	e007      	b.n	800400c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	619a      	str	r2, [r3, #24]
}
 800400c:	bf00      	nop
 800400e:	3758      	adds	r7, #88	; 0x58
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <memset>:
 8004014:	4402      	add	r2, r0
 8004016:	4603      	mov	r3, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4d0d      	ldr	r5, [pc, #52]	; (800405c <__libc_init_array+0x38>)
 8004028:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	2600      	movs	r6, #0
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <__libc_init_array+0x40>)
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <__libc_init_array+0x44>)
 8004038:	f000 f818 	bl	800406c <_init>
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	2600      	movs	r6, #0
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	08004134 	.word	0x08004134
 8004060:	08004134 	.word	0x08004134
 8004064:	08004134 	.word	0x08004134
 8004068:	08004138 	.word	0x08004138

0800406c <_init>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr

08004078 <_fini>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr
