
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b5c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d7c  08002d7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d7c  08002d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d84  08002d84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002d98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002d98  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000971e  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017be  00000000  00000000  0002979b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0002af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000547  00000000  00000000  0002b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026013  00000000  00000000  0002bb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a772  00000000  00000000  00051baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed158  00000000  00000000  0005c31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001aa4  00000000  00000000  00149474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0014af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002d3c 	.word	0x08002d3c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002d3c 	.word	0x08002d3c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b39      	ldr	r3, [pc, #228]	; (8000630 <MX_GPIO_Init+0xfc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a38      	ldr	r2, [pc, #224]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b36      	ldr	r3, [pc, #216]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b33      	ldr	r3, [pc, #204]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a32      	ldr	r2, [pc, #200]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_GPIO_Init+0xfc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_GPIO_Init+0xfc>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_GPIO_Init+0xfc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2101      	movs	r1, #1
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <MX_GPIO_Init+0x100>)
 80005b0:	f000 fda4 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	481b      	ldr	r0, [pc, #108]	; (8000638 <MX_GPIO_Init+0x104>)
 80005cc:	f000 fbea 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005d0:	2301      	movs	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4815      	ldr	r0, [pc, #84]	; (800063c <MX_GPIO_Init+0x108>)
 80005e6:	f000 fbdd 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_GPIO_Init+0x100>)
 8000602:	f000 fbcf 	bl	8000da4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	2103      	movs	r1, #3
 800060a:	2006      	movs	r0, #6
 800060c:	f000 fb93 	bl	8000d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000610:	2006      	movs	r0, #6
 8000612:	f000 fbac 	bl	8000d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 3);
 8000616:	2203      	movs	r2, #3
 8000618:	2102      	movs	r1, #2
 800061a:	2028      	movs	r0, #40	; 0x28
 800061c:	f000 fb8b 	bl	8000d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000620:	2028      	movs	r0, #40	; 0x28
 8000622:	f000 fba4 	bl	8000d6e <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	; 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40020400 	.word	0x40020400
 8000638:	40020800 	.word	0x40020800
 800063c:	40020000 	.word	0x40020000

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fa1b 	bl	8000a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f81c 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f7ff ff72 	bl	8000534 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000650:	f000 f95c 	bl	800090c <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000654:	bf00      	nop
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x3c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000660:	2b40      	cmp	r3, #64	; 0x40
 8000662:	d1f8      	bne.n	8000656 <main+0x16>
	  HAL_UART_Transmit(&huart3, (uint8_t*) ".", 1,1000);
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	2201      	movs	r2, #1
 800066a:	4905      	ldr	r1, [pc, #20]	; (8000680 <main+0x40>)
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <main+0x3c>)
 800066e:	f001 fe9b 	bl	80023a8 <HAL_UART_Transmit>
	  HAL_Delay(400);
 8000672:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000676:	f000 fa5f 	bl	8000b38 <HAL_Delay>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800067a:	e7eb      	b.n	8000654 <main+0x14>
 800067c:	2000002c 	.word	0x2000002c
 8000680:	08002d54 	.word	0x08002d54

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fb25 	bl	8002ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xb0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xb0>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xb0>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <SystemClock_Config+0xb4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <SystemClock_Config+0xb4>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <SystemClock_Config+0xb4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fd4f 	bl	8001194 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006fc:	f000 f88a 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ffe8 	bl	80016f0 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f000 f875 	bl	8000814 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800074c:	d11a      	bne.n	8000784 <HAL_GPIO_EXTI_Callback+0x48>
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "---", 3, 100);
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2203      	movs	r2, #3
 8000752:	492a      	ldr	r1, [pc, #168]	; (80007fc <HAL_GPIO_EXTI_Callback+0xc0>)
 8000754:	482a      	ldr	r0, [pc, #168]	; (8000800 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000756:	f001 fe27 	bl	80023a8 <HAL_UART_Transmit>
		HAL_Delay(200);
 800075a:	20c8      	movs	r0, #200	; 0xc8
 800075c:	f000 f9ec 	bl	8000b38 <HAL_Delay>
		for(int i=0; i<20; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e00b      	b.n	800077e <HAL_GPIO_EXTI_Callback+0x42>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *) "B", 1, 100);
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	2201      	movs	r2, #1
 800076a:	4926      	ldr	r1, [pc, #152]	; (8000804 <HAL_GPIO_EXTI_Callback+0xc8>)
 800076c:	4824      	ldr	r0, [pc, #144]	; (8000800 <HAL_GPIO_EXTI_Callback+0xc4>)
 800076e:	f001 fe1b 	bl	80023a8 <HAL_UART_Transmit>
		    HAL_Delay(200);
 8000772:	20c8      	movs	r0, #200	; 0xc8
 8000774:	f000 f9e0 	bl	8000b38 <HAL_Delay>
		for(int i=0; i<20; i++)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2b13      	cmp	r3, #19
 8000782:	ddf0      	ble.n	8000766 <HAL_GPIO_EXTI_Callback+0x2a>
		}
	}
	if(GPIO_Pin == GPIO_PIN_0)
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d133      	bne.n	80007f2 <HAL_GPIO_EXTI_Callback+0xb6>
		{
			if(state==0){
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <HAL_GPIO_EXTI_Callback+0xcc>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d108      	bne.n	80007a4 <HAL_GPIO_EXTI_Callback+0x68>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2101      	movs	r1, #1
 8000796:	481d      	ldr	r0, [pc, #116]	; (800080c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000798:	f000 fcb0 	bl	80010fc <HAL_GPIO_WritePin>
				state =1;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <HAL_GPIO_EXTI_Callback+0xcc>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	e00b      	b.n	80007bc <HAL_GPIO_EXTI_Callback+0x80>
			}else if(state == 1){
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_GPIO_EXTI_Callback+0xcc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d107      	bne.n	80007bc <HAL_GPIO_EXTI_Callback+0x80>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	4816      	ldr	r0, [pc, #88]	; (800080c <HAL_GPIO_EXTI_Callback+0xd0>)
 80007b2:	f000 fca3 	bl	80010fc <HAL_GPIO_WritePin>
				state=0;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_GPIO_EXTI_Callback+0xcc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Transmit(&huart3, (uint8_t *) "---", 3, 100);
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	2203      	movs	r2, #3
 80007c0:	490e      	ldr	r1, [pc, #56]	; (80007fc <HAL_GPIO_EXTI_Callback+0xc0>)
 80007c2:	480f      	ldr	r0, [pc, #60]	; (8000800 <HAL_GPIO_EXTI_Callback+0xc4>)
 80007c4:	f001 fdf0 	bl	80023a8 <HAL_UART_Transmit>
			HAL_Delay(200);
 80007c8:	20c8      	movs	r0, #200	; 0xc8
 80007ca:	f000 f9b5 	bl	8000b38 <HAL_Delay>
			for(int i=0; i<20; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	e00b      	b.n	80007ec <HAL_GPIO_EXTI_Callback+0xb0>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) "E", 1, 100);
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	2201      	movs	r2, #1
 80007d8:	490d      	ldr	r1, [pc, #52]	; (8000810 <HAL_GPIO_EXTI_Callback+0xd4>)
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <HAL_GPIO_EXTI_Callback+0xc4>)
 80007dc:	f001 fde4 	bl	80023a8 <HAL_UART_Transmit>
			    HAL_Delay(200);
 80007e0:	20c8      	movs	r0, #200	; 0xc8
 80007e2:	f000 f9a9 	bl	8000b38 <HAL_Delay>
			for(int i=0; i<20; i++)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	3301      	adds	r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	2b13      	cmp	r3, #19
 80007f0:	ddf0      	ble.n	80007d4 <HAL_GPIO_EXTI_Callback+0x98>
			}
		}
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08002d58 	.word	0x08002d58
 8000800:	2000002c 	.word	0x2000002c
 8000804:	08002d5c 	.word	0x08002d5c
 8000808:	20000028 	.word	0x20000028
 800080c:	40020400 	.word	0x40020400
 8000810:	08002d60 	.word	0x08002d60

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x44>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000856:	2005      	movs	r0, #5
 8000858:	f000 fa62 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f920 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fc4f 	bl	8001164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008d4:	f000 fc46 	bl	8001164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008d8:	2101      	movs	r1, #1
 80008da:	4802      	ldr	r0, [pc, #8]	; (80008e4 <EXTI15_10_IRQHandler+0x18>)
 80008dc:	f000 fc27 	bl	800112e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40020400 	.word	0x40020400

080008e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_USART3_UART_Init+0x5c>)
 8000914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000950:	f001 fcdc 	bl	800230c <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800095a:	f7ff ff5b 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000002c 	.word	0x2000002c
 8000968:	40004800 	.word	0x40004800

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ae      	sub	sp, #184	; 0xb8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2290      	movs	r2, #144	; 0x90
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f9a8 	bl	8002ce2 <memset>
  if(uartHandle->Instance==USART3)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <HAL_UART_MspInit+0xb4>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13c      	bne.n	8000a16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f886 	bl	8001abc <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009b6:	f7ff ff2d 	bl	8000814 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xb8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a04:	2307      	movs	r3, #7
 8000a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0xbc>)
 8000a12:	f000 f9c7 	bl	8000da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a16:	bf00      	nop
 8000a18:	37b8      	adds	r7, #184	; 0xb8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004800 	.word	0x40004800
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ff47 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 f94b 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fdef 	bl	8000640 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	08002d8c 	.word	0x08002d8c
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	200000b8 	.word	0x200000b8

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>

08000a7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f94c 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 f805 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8e:	f7ff fec7 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f967 	bl	8000d8a <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	f000 f92f 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200000b4 	.word	0x200000b4

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000b4 	.word	0x200000b4

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00
 8000bc4:	05fa0000 	.word	0x05fa0000

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e175      	b.n	80010b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 8164 	bne.w	80010aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d005      	beq.n	8000dfa <HAL_GPIO_Init+0x56>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d130      	bne.n	8000e5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d017      	beq.n	8000e98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80be 	beq.w	80010aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_GPIO_Init+0x324>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f46:	4a61      	ldr	r2, [pc, #388]	; (80010cc <HAL_GPIO_Init+0x328>)
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <HAL_GPIO_Init+0x32c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d037      	beq.n	8000fe2 <HAL_GPIO_Init+0x23e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x330>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d031      	beq.n	8000fde <HAL_GPIO_Init+0x23a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x334>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d02b      	beq.n	8000fda <HAL_GPIO_Init+0x236>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <HAL_GPIO_Init+0x338>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d025      	beq.n	8000fd6 <HAL_GPIO_Init+0x232>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x33c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01f      	beq.n	8000fd2 <HAL_GPIO_Init+0x22e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a53      	ldr	r2, [pc, #332]	; (80010e4 <HAL_GPIO_Init+0x340>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x22a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x344>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x226>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a51      	ldr	r2, [pc, #324]	; (80010ec <HAL_GPIO_Init+0x348>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x222>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_GPIO_Init+0x34c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x21e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_GPIO_Init+0x350>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x21a>
 8000fba:	2309      	movs	r3, #9
 8000fbc:	e012      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	e010      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	e00e      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00c      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e00a      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x240>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x328>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001026:	4a34      	ldr	r2, [pc, #208]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_GPIO_Init+0x354>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_GPIO_Init+0x354>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_GPIO_Init+0x354>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x354>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f ae86 	bls.w	8000dc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40021400 	.word	0x40021400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40021c00 	.word	0x40021c00
 80010f0:	40022000 	.word	0x40022000
 80010f4:	40022400 	.word	0x40022400
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43d9      	mvns	r1, r3
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	400b      	ands	r3, r1
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fada 	bl	800073c <HAL_GPIO_EXTI_Callback>
  }
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e29b      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8087 	beq.w	80012c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b8:	4b96      	ldr	r3, [pc, #600]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d00c      	beq.n	80011de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c4:	4b93      	ldr	r3, [pc, #588]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d112      	bne.n	80011f6 <HAL_RCC_OscConfig+0x62>
 80011d0:	4b90      	ldr	r3, [pc, #576]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011dc:	d10b      	bne.n	80011f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011de:	4b8d      	ldr	r3, [pc, #564]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d06c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x130>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d168      	bne.n	80012c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e275      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x7a>
 8001200:	4b84      	ldr	r3, [pc, #528]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a83      	ldr	r2, [pc, #524]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	e02e      	b.n	800126c <HAL_RCC_OscConfig+0xd8>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x9c>
 8001216:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a7e      	ldr	r2, [pc, #504]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800121c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7b      	ldr	r2, [pc, #492]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e01d      	b.n	800126c <HAL_RCC_OscConfig+0xd8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0xc0>
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a75      	ldr	r2, [pc, #468]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a72      	ldr	r2, [pc, #456]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e00b      	b.n	800126c <HAL_RCC_OscConfig+0xd8>
 8001254:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800125a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a6b      	ldr	r2, [pc, #428]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d013      	beq.n	800129c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fc54 	bl	8000b20 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fc50 	bl	8000b20 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e229      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0xe8>
 800129a:	e014      	b.n	80012c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fc40 	bl	8000b20 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fc3c 	bl	8000b20 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e215      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x110>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d069      	beq.n	80013a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012d2:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d11c      	bne.n	8001324 <HAL_RCC_OscConfig+0x190>
 80012ea:	4b4a      	ldr	r3, [pc, #296]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d116      	bne.n	8001324 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <HAL_RCC_OscConfig+0x17a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e1e9      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	493d      	ldr	r1, [pc, #244]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001322:	e040      	b.n	80013a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d023      	beq.n	8001374 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132c:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a38      	ldr	r2, [pc, #224]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fbf2 	bl	8000b20 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fbee 	bl	8000b20 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1c7      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4929      	ldr	r1, [pc, #164]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
 8001372:	e018      	b.n	80013a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fbce 	bl	8000b20 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fbca 	bl	8000b20 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1a3      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d038      	beq.n	8001424 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d019      	beq.n	80013ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80013bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c6:	f7ff fbab 	bl	8000b20 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fba7 	bl	8000b20 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e180      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80013e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x23a>
 80013ec:	e01a      	b.n	8001424 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_RCC_OscConfig+0x280>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb91 	bl	8000b20 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff fb8d 	bl	8000b20 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d903      	bls.n	8001418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e166      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
 8001414:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001418:	4b92      	ldr	r3, [pc, #584]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 800141a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a4 	beq.w	800157a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001432:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10d      	bne.n	800145a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b89      	ldr	r3, [pc, #548]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a88      	ldr	r2, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b86      	ldr	r3, [pc, #536]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145a:	4b83      	ldr	r3, [pc, #524]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d118      	bne.n	8001498 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001466:	4b80      	ldr	r3, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7f      	ldr	r2, [pc, #508]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001472:	f7ff fb55 	bl	8000b20 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147a:	f7ff fb51 	bl	8000b20 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e12a      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148c:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x4d4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x31a>
 80014a0:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	4a6f      	ldr	r2, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6713      	str	r3, [r2, #112]	; 0x70
 80014ac:	e02d      	b.n	800150a <HAL_RCC_OscConfig+0x376>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x33c>
 80014b6:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a6a      	ldr	r2, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	4b68      	ldr	r3, [pc, #416]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a67      	ldr	r2, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	e01c      	b.n	800150a <HAL_RCC_OscConfig+0x376>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d10c      	bne.n	80014f2 <HAL_RCC_OscConfig+0x35e>
 80014d8:	4b62      	ldr	r3, [pc, #392]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a61      	ldr	r2, [pc, #388]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a5e      	ldr	r2, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	e00b      	b.n	800150a <HAL_RCC_OscConfig+0x376>
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5b      	ldr	r2, [pc, #364]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a58      	ldr	r2, [pc, #352]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d015      	beq.n	800153e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001512:	f7ff fb05 	bl	8000b20 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb01 	bl	8000b20 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e0d8      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ee      	beq.n	800151a <HAL_RCC_OscConfig+0x386>
 800153c:	e014      	b.n	8001568 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153e:	f7ff faef 	bl	8000b20 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff faeb 	bl	8000b20 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0c2      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1ee      	bne.n	8001546 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80ae 	beq.w	80016e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d06d      	beq.n	800166c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d14b      	bne.n	8001630 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 800159e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fabc 	bl	8000b20 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff fab8 	bl	8000b20 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e091      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	3b01      	subs	r3, #1
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	071b      	lsls	r3, r3, #28
 80015f6:	491b      	ldr	r1, [pc, #108]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a18      	ldr	r2, [pc, #96]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fa8a 	bl	8000b20 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fa86 	bl	8000b20 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e05f      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x47c>
 800162e:	e057      	b.n	80016e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fa70 	bl	8000b20 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fa6c 	bl	8000b20 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e045      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_RCC_OscConfig+0x4d0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x4b0>
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x54c>
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <HAL_RCC_OscConfig+0x558>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d030      	beq.n	80016dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d129      	bne.n	80016dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d122      	bne.n	80016dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d119      	bne.n	80016dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d10f      	bne.n	80016dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0d0      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d910      	bls.n	8001738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 020f 	bic.w	r2, r3, #15
 800171e:	4965      	ldr	r1, [pc, #404]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0b8      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800175a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 800176e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	494d      	ldr	r1, [pc, #308]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d040      	beq.n	8001814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d115      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e07f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e073      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e06b      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4936      	ldr	r1, [pc, #216]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e4:	f7ff f99c 	bl	8000b20 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff f998 	bl	8000b20 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e053      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d210      	bcs.n	8001844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 020f 	bic.w	r2, r3, #15
 800182a:	4922      	ldr	r1, [pc, #136]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e032      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4916      	ldr	r1, [pc, #88]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	490e      	ldr	r1, [pc, #56]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001882:	f000 f821 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001886:	4602      	mov	r2, r0
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	490a      	ldr	r1, [pc, #40]	; (80018bc <HAL_RCC_ClockConfig+0x1cc>)
 8001894:	5ccb      	ldrb	r3, [r1, r3]
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1d0>)
 800189c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1d4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f8f8 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	08002d64 	.word	0x08002d64
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018cc:	b090      	sub	sp, #64	; 0x40
 80018ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
 80018d4:	2300      	movs	r3, #0
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x180>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d00d      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x40>
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	f200 80a1 	bhi.w	8001a34 <HAL_RCC_GetSysClockFreq+0x16c>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x34>
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x3a>
 80018fa:	e09b      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x184>)
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001900:	e09b      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001902:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001906:	e098      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001912:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d028      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	2200      	movs	r2, #0
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	627a      	str	r2, [r7, #36]	; 0x24
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001930:	2100      	movs	r1, #0
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001934:	fb03 f201 	mul.w	r2, r3, r1
 8001938:	2300      	movs	r3, #0
 800193a:	fb00 f303 	mul.w	r3, r0, r3
 800193e:	4413      	add	r3, r2
 8001940:	4a43      	ldr	r2, [pc, #268]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001942:	fba0 1202 	umull	r1, r2, r0, r2
 8001946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001948:	460a      	mov	r2, r1
 800194a:	62ba      	str	r2, [r7, #40]	; 0x28
 800194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194e:	4413      	add	r3, r2
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	2200      	movs	r2, #0
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	61fa      	str	r2, [r7, #28]
 800195a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800195e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001962:	f7fe fc69 	bl	8000238 <__aeabi_uldivmod>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4613      	mov	r3, r2
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800196e:	e053      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	2200      	movs	r2, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	617a      	str	r2, [r7, #20]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001982:	f04f 0b00 	mov.w	fp, #0
 8001986:	4652      	mov	r2, sl
 8001988:	465b      	mov	r3, fp
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	0159      	lsls	r1, r3, #5
 8001994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001998:	0150      	lsls	r0, r2, #5
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ebb2 080a 	subs.w	r8, r2, sl
 80019a2:	eb63 090b 	sbc.w	r9, r3, fp
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ba:	ebb2 0408 	subs.w	r4, r2, r8
 80019be:	eb63 0509 	sbc.w	r5, r3, r9
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	00eb      	lsls	r3, r5, #3
 80019cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d0:	00e2      	lsls	r2, r4, #3
 80019d2:	4614      	mov	r4, r2
 80019d4:	461d      	mov	r5, r3
 80019d6:	eb14 030a 	adds.w	r3, r4, sl
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	eb45 030b 	adc.w	r3, r5, fp
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ee:	4629      	mov	r1, r5
 80019f0:	028b      	lsls	r3, r1, #10
 80019f2:	4621      	mov	r1, r4
 80019f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f8:	4621      	mov	r1, r4
 80019fa:	028a      	lsls	r2, r1, #10
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a02:	2200      	movs	r2, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	60fa      	str	r2, [r7, #12]
 8001a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a0c:	f7fe fc14 	bl	8000238 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c1b      	lsrs	r3, r3, #16
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	3301      	adds	r3, #1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3740      	adds	r7, #64	; 0x40
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	017d7840 	.word	0x017d7840

08001a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000000 	.word	0x20000000

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0a9b      	lsrs	r3, r3, #10
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08002d74 	.word	0x08002d74

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a98:	f7ff ffdc 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0b5b      	lsrs	r3, r3, #13
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08002d74 	.word	0x08002d74

08001abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ae4:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a68      	ldr	r2, [pc, #416]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001aee:	6093      	str	r3, [r2, #8]
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af8:	4964      	ldr	r1, [pc, #400]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d017      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	4959      	ldr	r1, [pc, #356]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b34:	d101      	bne.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d017      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	494a      	ldr	r1, [pc, #296]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b70:	d101      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 808b 	beq.w	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	4a39      	ldr	r2, [pc, #228]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bac:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bb8:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a34      	ldr	r2, [pc, #208]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc4:	f7fe ffac 	bl	8000b20 <HAL_GetTick>
 8001bc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7fe ffa8 	bl	8000b20 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e38f      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d035      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d02e      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c16:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c2a:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d114      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ff70 	bl	8000b20 <HAL_GetTick>
 8001c40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe ff6c 	bl	8000b20 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e351      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0ee      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c72:	d111      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c82:	400b      	ands	r3, r1
 8001c84:	4901      	ldr	r1, [pc, #4]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	0ffffcff 	.word	0x0ffffcff
 8001c98:	4bac      	ldr	r3, [pc, #688]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4aab      	ldr	r2, [pc, #684]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ca2:	6093      	str	r3, [r2, #8]
 8001ca4:	4ba9      	ldr	r3, [pc, #676]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	49a6      	ldr	r1, [pc, #664]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d010      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cc2:	4ba2      	ldr	r3, [pc, #648]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cc8:	4aa0      	ldr	r2, [pc, #640]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cd2:	4b9e      	ldr	r3, [pc, #632]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cdc:	499b      	ldr	r1, [pc, #620]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00a      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cf0:	4b96      	ldr	r3, [pc, #600]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cfe:	4993      	ldr	r1, [pc, #588]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d12:	4b8e      	ldr	r3, [pc, #568]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d20:	498a      	ldr	r1, [pc, #552]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00a      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d34:	4b85      	ldr	r3, [pc, #532]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d42:	4982      	ldr	r1, [pc, #520]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d56:	4b7d      	ldr	r3, [pc, #500]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4979      	ldr	r1, [pc, #484]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d78:	4b74      	ldr	r3, [pc, #464]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	f023 0203 	bic.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4971      	ldr	r1, [pc, #452]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d9a:	4b6c      	ldr	r3, [pc, #432]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	f023 020c 	bic.w	r2, r3, #12
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	4968      	ldr	r1, [pc, #416]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dbc:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4960      	ldr	r1, [pc, #384]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	4957      	ldr	r1, [pc, #348]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	494f      	ldr	r1, [pc, #316]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4946      	ldr	r1, [pc, #280]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	493e      	ldr	r1, [pc, #248]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e74:	4935      	ldr	r1, [pc, #212]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e96:	492d      	ldr	r1, [pc, #180]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d011      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eb8:	4924      	ldr	r1, [pc, #144]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ec8:	d101      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef8:	4914      	ldr	r1, [pc, #80]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00b      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f1c:	490b      	ldr	r1, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00f      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f40:	4902      	ldr	r1, [pc, #8]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f48:	e002      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00b      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f5c:	4b8a      	ldr	r3, [pc, #552]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6c:	4986      	ldr	r1, [pc, #536]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00b      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f80:	4b81      	ldr	r3, [pc, #516]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f90:	497d      	ldr	r1, [pc, #500]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d006      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80d6 	beq.w	8002158 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a75      	ldr	r2, [pc, #468]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fdb2 	bl	8000b20 <HAL_GetTick>
 8001fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fc0:	f7fe fdae 	bl	8000b20 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e195      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d021      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d11d      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002006:	0e1b      	lsrs	r3, r3, #24
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	019a      	lsls	r2, r3, #6
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	071b      	lsls	r3, r3, #28
 8002026:	4958      	ldr	r1, [pc, #352]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02e      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002058:	d129      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800205a:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002068:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800206e:	0f1b      	lsrs	r3, r3, #28
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	019a      	lsls	r2, r3, #6
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	061b      	lsls	r3, r3, #24
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	071b      	lsls	r3, r3, #28
 800208e:	493e      	ldr	r1, [pc, #248]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002096:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800209c:	f023 021f 	bic.w	r2, r3, #31
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	3b01      	subs	r3, #1
 80020a6:	4938      	ldr	r1, [pc, #224]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01d      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c0:	0e1b      	lsrs	r3, r3, #24
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ce:	0f1b      	lsrs	r3, r3, #28
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	019a      	lsls	r2, r3, #6
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	431a      	orrs	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	431a      	orrs	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	071b      	lsls	r3, r3, #28
 80020ee:	4926      	ldr	r1, [pc, #152]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	019a      	lsls	r2, r3, #6
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	071b      	lsls	r3, r3, #28
 800211e:	491a      	ldr	r1, [pc, #104]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002132:	f7fe fcf5 	bl	8000b20 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800213a:	f7fe fcf1 	bl	8000b20 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0d8      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 80ce 	bne.w	80022fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a08      	ldr	r2, [pc, #32]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800216c:	f7fe fcd8 	bl	8000b20 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002172:	e00b      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002174:	f7fe fcd4 	bl	8000b20 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d904      	bls.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0bb      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800218c:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002198:	d0ec      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d02e      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12a      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021d0:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	0f1b      	lsrs	r3, r3, #28
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	019a      	lsls	r2, r3, #6
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	061b      	lsls	r3, r3, #24
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	071b      	lsls	r3, r3, #28
 80021f6:	4944      	ldr	r1, [pc, #272]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021fe:	4b42      	ldr	r3, [pc, #264]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002204:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	493d      	ldr	r1, [pc, #244]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d022      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222c:	d11d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	0e1b      	lsrs	r3, r3, #24
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800223c:	4b32      	ldr	r3, [pc, #200]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	0f1b      	lsrs	r3, r3, #28
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	4929      	ldr	r1, [pc, #164]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d028      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	0e1b      	lsrs	r3, r3, #24
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	019a      	lsls	r2, r3, #6
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	071b      	lsls	r3, r3, #28
 80022aa:	4917      	ldr	r1, [pc, #92]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	4911      	ldr	r1, [pc, #68]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe fc24 	bl	8000b20 <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022dc:	f7fe fc20 	bl	8000b20 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e007      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fa:	d1ef      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e040      	b.n	80023a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fb1c 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	; 0x24
 8002338:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f8b0 	bl	80024b0 <UART_SetConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e022      	b.n	80023a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fb08 	bl	8002978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb8f 	bl	8002abc <UART_CheckIdleState>
 800239e:	4603      	mov	r3, r0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d171      	bne.n	80024a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Transmit+0x24>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e06a      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2221      	movs	r2, #33	; 0x21
 80023dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023de:	f7fe fb9f 	bl	8000b20 <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	d108      	bne.n	8002410 <HAL_UART_Transmit+0x68>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002418:	e02c      	b.n	8002474 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fb96 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e038      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10b      	bne.n	8002452 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	3302      	adds	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e007      	b.n	8002462 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	3301      	adds	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1cc      	bne.n	800241a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2200      	movs	r2, #0
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fb63 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e005      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4ba6      	ldr	r3, [pc, #664]	; (8002774 <UART_SetConfig+0x2c4>)
 80024dc:	4013      	ands	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	6979      	ldr	r1, [r7, #20]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a94      	ldr	r2, [pc, #592]	; (8002778 <UART_SetConfig+0x2c8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d120      	bne.n	800256e <UART_SetConfig+0xbe>
 800252c:	4b93      	ldr	r3, [pc, #588]	; (800277c <UART_SetConfig+0x2cc>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d816      	bhi.n	8002568 <UART_SetConfig+0xb8>
 800253a:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <UART_SetConfig+0x90>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002551 	.word	0x08002551
 8002544:	0800255d 	.word	0x0800255d
 8002548:	08002557 	.word	0x08002557
 800254c:	08002563 	.word	0x08002563
 8002550:	2301      	movs	r3, #1
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e150      	b.n	80027f8 <UART_SetConfig+0x348>
 8002556:	2302      	movs	r3, #2
 8002558:	77fb      	strb	r3, [r7, #31]
 800255a:	e14d      	b.n	80027f8 <UART_SetConfig+0x348>
 800255c:	2304      	movs	r3, #4
 800255e:	77fb      	strb	r3, [r7, #31]
 8002560:	e14a      	b.n	80027f8 <UART_SetConfig+0x348>
 8002562:	2308      	movs	r3, #8
 8002564:	77fb      	strb	r3, [r7, #31]
 8002566:	e147      	b.n	80027f8 <UART_SetConfig+0x348>
 8002568:	2310      	movs	r3, #16
 800256a:	77fb      	strb	r3, [r7, #31]
 800256c:	e144      	b.n	80027f8 <UART_SetConfig+0x348>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a83      	ldr	r2, [pc, #524]	; (8002780 <UART_SetConfig+0x2d0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d132      	bne.n	80025de <UART_SetConfig+0x12e>
 8002578:	4b80      	ldr	r3, [pc, #512]	; (800277c <UART_SetConfig+0x2cc>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d828      	bhi.n	80025d8 <UART_SetConfig+0x128>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <UART_SetConfig+0xdc>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080025d9 	.word	0x080025d9
 8002594:	080025d9 	.word	0x080025d9
 8002598:	080025d9 	.word	0x080025d9
 800259c:	080025cd 	.word	0x080025cd
 80025a0:	080025d9 	.word	0x080025d9
 80025a4:	080025d9 	.word	0x080025d9
 80025a8:	080025d9 	.word	0x080025d9
 80025ac:	080025c7 	.word	0x080025c7
 80025b0:	080025d9 	.word	0x080025d9
 80025b4:	080025d9 	.word	0x080025d9
 80025b8:	080025d9 	.word	0x080025d9
 80025bc:	080025d3 	.word	0x080025d3
 80025c0:	2300      	movs	r3, #0
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e118      	b.n	80027f8 <UART_SetConfig+0x348>
 80025c6:	2302      	movs	r3, #2
 80025c8:	77fb      	strb	r3, [r7, #31]
 80025ca:	e115      	b.n	80027f8 <UART_SetConfig+0x348>
 80025cc:	2304      	movs	r3, #4
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e112      	b.n	80027f8 <UART_SetConfig+0x348>
 80025d2:	2308      	movs	r3, #8
 80025d4:	77fb      	strb	r3, [r7, #31]
 80025d6:	e10f      	b.n	80027f8 <UART_SetConfig+0x348>
 80025d8:	2310      	movs	r3, #16
 80025da:	77fb      	strb	r3, [r7, #31]
 80025dc:	e10c      	b.n	80027f8 <UART_SetConfig+0x348>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a68      	ldr	r2, [pc, #416]	; (8002784 <UART_SetConfig+0x2d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d120      	bne.n	800262a <UART_SetConfig+0x17a>
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <UART_SetConfig+0x2cc>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025f2:	2b30      	cmp	r3, #48	; 0x30
 80025f4:	d013      	beq.n	800261e <UART_SetConfig+0x16e>
 80025f6:	2b30      	cmp	r3, #48	; 0x30
 80025f8:	d814      	bhi.n	8002624 <UART_SetConfig+0x174>
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d009      	beq.n	8002612 <UART_SetConfig+0x162>
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d810      	bhi.n	8002624 <UART_SetConfig+0x174>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <UART_SetConfig+0x15c>
 8002606:	2b10      	cmp	r3, #16
 8002608:	d006      	beq.n	8002618 <UART_SetConfig+0x168>
 800260a:	e00b      	b.n	8002624 <UART_SetConfig+0x174>
 800260c:	2300      	movs	r3, #0
 800260e:	77fb      	strb	r3, [r7, #31]
 8002610:	e0f2      	b.n	80027f8 <UART_SetConfig+0x348>
 8002612:	2302      	movs	r3, #2
 8002614:	77fb      	strb	r3, [r7, #31]
 8002616:	e0ef      	b.n	80027f8 <UART_SetConfig+0x348>
 8002618:	2304      	movs	r3, #4
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e0ec      	b.n	80027f8 <UART_SetConfig+0x348>
 800261e:	2308      	movs	r3, #8
 8002620:	77fb      	strb	r3, [r7, #31]
 8002622:	e0e9      	b.n	80027f8 <UART_SetConfig+0x348>
 8002624:	2310      	movs	r3, #16
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e0e6      	b.n	80027f8 <UART_SetConfig+0x348>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a56      	ldr	r2, [pc, #344]	; (8002788 <UART_SetConfig+0x2d8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d120      	bne.n	8002676 <UART_SetConfig+0x1c6>
 8002634:	4b51      	ldr	r3, [pc, #324]	; (800277c <UART_SetConfig+0x2cc>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800263e:	2bc0      	cmp	r3, #192	; 0xc0
 8002640:	d013      	beq.n	800266a <UART_SetConfig+0x1ba>
 8002642:	2bc0      	cmp	r3, #192	; 0xc0
 8002644:	d814      	bhi.n	8002670 <UART_SetConfig+0x1c0>
 8002646:	2b80      	cmp	r3, #128	; 0x80
 8002648:	d009      	beq.n	800265e <UART_SetConfig+0x1ae>
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d810      	bhi.n	8002670 <UART_SetConfig+0x1c0>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <UART_SetConfig+0x1a8>
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d006      	beq.n	8002664 <UART_SetConfig+0x1b4>
 8002656:	e00b      	b.n	8002670 <UART_SetConfig+0x1c0>
 8002658:	2300      	movs	r3, #0
 800265a:	77fb      	strb	r3, [r7, #31]
 800265c:	e0cc      	b.n	80027f8 <UART_SetConfig+0x348>
 800265e:	2302      	movs	r3, #2
 8002660:	77fb      	strb	r3, [r7, #31]
 8002662:	e0c9      	b.n	80027f8 <UART_SetConfig+0x348>
 8002664:	2304      	movs	r3, #4
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e0c6      	b.n	80027f8 <UART_SetConfig+0x348>
 800266a:	2308      	movs	r3, #8
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e0c3      	b.n	80027f8 <UART_SetConfig+0x348>
 8002670:	2310      	movs	r3, #16
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e0c0      	b.n	80027f8 <UART_SetConfig+0x348>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a44      	ldr	r2, [pc, #272]	; (800278c <UART_SetConfig+0x2dc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d125      	bne.n	80026cc <UART_SetConfig+0x21c>
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <UART_SetConfig+0x2cc>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800268e:	d017      	beq.n	80026c0 <UART_SetConfig+0x210>
 8002690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002694:	d817      	bhi.n	80026c6 <UART_SetConfig+0x216>
 8002696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269a:	d00b      	beq.n	80026b4 <UART_SetConfig+0x204>
 800269c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a0:	d811      	bhi.n	80026c6 <UART_SetConfig+0x216>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <UART_SetConfig+0x1fe>
 80026a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026aa:	d006      	beq.n	80026ba <UART_SetConfig+0x20a>
 80026ac:	e00b      	b.n	80026c6 <UART_SetConfig+0x216>
 80026ae:	2300      	movs	r3, #0
 80026b0:	77fb      	strb	r3, [r7, #31]
 80026b2:	e0a1      	b.n	80027f8 <UART_SetConfig+0x348>
 80026b4:	2302      	movs	r3, #2
 80026b6:	77fb      	strb	r3, [r7, #31]
 80026b8:	e09e      	b.n	80027f8 <UART_SetConfig+0x348>
 80026ba:	2304      	movs	r3, #4
 80026bc:	77fb      	strb	r3, [r7, #31]
 80026be:	e09b      	b.n	80027f8 <UART_SetConfig+0x348>
 80026c0:	2308      	movs	r3, #8
 80026c2:	77fb      	strb	r3, [r7, #31]
 80026c4:	e098      	b.n	80027f8 <UART_SetConfig+0x348>
 80026c6:	2310      	movs	r3, #16
 80026c8:	77fb      	strb	r3, [r7, #31]
 80026ca:	e095      	b.n	80027f8 <UART_SetConfig+0x348>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <UART_SetConfig+0x2e0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d125      	bne.n	8002722 <UART_SetConfig+0x272>
 80026d6:	4b29      	ldr	r3, [pc, #164]	; (800277c <UART_SetConfig+0x2cc>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026e4:	d017      	beq.n	8002716 <UART_SetConfig+0x266>
 80026e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026ea:	d817      	bhi.n	800271c <UART_SetConfig+0x26c>
 80026ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f0:	d00b      	beq.n	800270a <UART_SetConfig+0x25a>
 80026f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f6:	d811      	bhi.n	800271c <UART_SetConfig+0x26c>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <UART_SetConfig+0x254>
 80026fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002700:	d006      	beq.n	8002710 <UART_SetConfig+0x260>
 8002702:	e00b      	b.n	800271c <UART_SetConfig+0x26c>
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e076      	b.n	80027f8 <UART_SetConfig+0x348>
 800270a:	2302      	movs	r3, #2
 800270c:	77fb      	strb	r3, [r7, #31]
 800270e:	e073      	b.n	80027f8 <UART_SetConfig+0x348>
 8002710:	2304      	movs	r3, #4
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e070      	b.n	80027f8 <UART_SetConfig+0x348>
 8002716:	2308      	movs	r3, #8
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	e06d      	b.n	80027f8 <UART_SetConfig+0x348>
 800271c:	2310      	movs	r3, #16
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	e06a      	b.n	80027f8 <UART_SetConfig+0x348>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <UART_SetConfig+0x2e4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d138      	bne.n	800279e <UART_SetConfig+0x2ee>
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <UART_SetConfig+0x2cc>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800273a:	d017      	beq.n	800276c <UART_SetConfig+0x2bc>
 800273c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002740:	d82a      	bhi.n	8002798 <UART_SetConfig+0x2e8>
 8002742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002746:	d00b      	beq.n	8002760 <UART_SetConfig+0x2b0>
 8002748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274c:	d824      	bhi.n	8002798 <UART_SetConfig+0x2e8>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <UART_SetConfig+0x2aa>
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002756:	d006      	beq.n	8002766 <UART_SetConfig+0x2b6>
 8002758:	e01e      	b.n	8002798 <UART_SetConfig+0x2e8>
 800275a:	2300      	movs	r3, #0
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e04b      	b.n	80027f8 <UART_SetConfig+0x348>
 8002760:	2302      	movs	r3, #2
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e048      	b.n	80027f8 <UART_SetConfig+0x348>
 8002766:	2304      	movs	r3, #4
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e045      	b.n	80027f8 <UART_SetConfig+0x348>
 800276c:	2308      	movs	r3, #8
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e042      	b.n	80027f8 <UART_SetConfig+0x348>
 8002772:	bf00      	nop
 8002774:	efff69f3 	.word	0xefff69f3
 8002778:	40011000 	.word	0x40011000
 800277c:	40023800 	.word	0x40023800
 8002780:	40004400 	.word	0x40004400
 8002784:	40004800 	.word	0x40004800
 8002788:	40004c00 	.word	0x40004c00
 800278c:	40005000 	.word	0x40005000
 8002790:	40011400 	.word	0x40011400
 8002794:	40007800 	.word	0x40007800
 8002798:	2310      	movs	r3, #16
 800279a:	77fb      	strb	r3, [r7, #31]
 800279c:	e02c      	b.n	80027f8 <UART_SetConfig+0x348>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a72      	ldr	r2, [pc, #456]	; (800296c <UART_SetConfig+0x4bc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d125      	bne.n	80027f4 <UART_SetConfig+0x344>
 80027a8:	4b71      	ldr	r3, [pc, #452]	; (8002970 <UART_SetConfig+0x4c0>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027b6:	d017      	beq.n	80027e8 <UART_SetConfig+0x338>
 80027b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027bc:	d817      	bhi.n	80027ee <UART_SetConfig+0x33e>
 80027be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c2:	d00b      	beq.n	80027dc <UART_SetConfig+0x32c>
 80027c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c8:	d811      	bhi.n	80027ee <UART_SetConfig+0x33e>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <UART_SetConfig+0x326>
 80027ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d2:	d006      	beq.n	80027e2 <UART_SetConfig+0x332>
 80027d4:	e00b      	b.n	80027ee <UART_SetConfig+0x33e>
 80027d6:	2300      	movs	r3, #0
 80027d8:	77fb      	strb	r3, [r7, #31]
 80027da:	e00d      	b.n	80027f8 <UART_SetConfig+0x348>
 80027dc:	2302      	movs	r3, #2
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	e00a      	b.n	80027f8 <UART_SetConfig+0x348>
 80027e2:	2304      	movs	r3, #4
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e007      	b.n	80027f8 <UART_SetConfig+0x348>
 80027e8:	2308      	movs	r3, #8
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	e004      	b.n	80027f8 <UART_SetConfig+0x348>
 80027ee:	2310      	movs	r3, #16
 80027f0:	77fb      	strb	r3, [r7, #31]
 80027f2:	e001      	b.n	80027f8 <UART_SetConfig+0x348>
 80027f4:	2310      	movs	r3, #16
 80027f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002800:	d15b      	bne.n	80028ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d828      	bhi.n	800285a <UART_SetConfig+0x3aa>
 8002808:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <UART_SetConfig+0x360>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	08002835 	.word	0x08002835
 8002814:	0800283d 	.word	0x0800283d
 8002818:	08002845 	.word	0x08002845
 800281c:	0800285b 	.word	0x0800285b
 8002820:	0800284b 	.word	0x0800284b
 8002824:	0800285b 	.word	0x0800285b
 8002828:	0800285b 	.word	0x0800285b
 800282c:	0800285b 	.word	0x0800285b
 8002830:	08002853 	.word	0x08002853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002834:	f7ff f91a 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8002838:	61b8      	str	r0, [r7, #24]
        break;
 800283a:	e013      	b.n	8002864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800283c:	f7ff f92a 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 8002840:	61b8      	str	r0, [r7, #24]
        break;
 8002842:	e00f      	b.n	8002864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002844:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <UART_SetConfig+0x4c4>)
 8002846:	61bb      	str	r3, [r7, #24]
        break;
 8002848:	e00c      	b.n	8002864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800284a:	f7ff f83d 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 800284e:	61b8      	str	r0, [r7, #24]
        break;
 8002850:	e008      	b.n	8002864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002856:	61bb      	str	r3, [r7, #24]
        break;
 8002858:	e004      	b.n	8002864 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	77bb      	strb	r3, [r7, #30]
        break;
 8002862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d074      	beq.n	8002954 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	005a      	lsls	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	d916      	bls.n	80028b4 <UART_SetConfig+0x404>
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d212      	bcs.n	80028b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	b29b      	uxth	r3, r3
 8002892:	f023 030f 	bic.w	r3, r3, #15
 8002896:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	89fa      	ldrh	r2, [r7, #14]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	e04f      	b.n	8002954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77bb      	strb	r3, [r7, #30]
 80028b8:	e04c      	b.n	8002954 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028ba:	7ffb      	ldrb	r3, [r7, #31]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d828      	bhi.n	8002912 <UART_SetConfig+0x462>
 80028c0:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <UART_SetConfig+0x418>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	080028fd 	.word	0x080028fd
 80028d4:	08002913 	.word	0x08002913
 80028d8:	08002903 	.word	0x08002903
 80028dc:	08002913 	.word	0x08002913
 80028e0:	08002913 	.word	0x08002913
 80028e4:	08002913 	.word	0x08002913
 80028e8:	0800290b 	.word	0x0800290b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028ec:	f7ff f8be 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80028f0:	61b8      	str	r0, [r7, #24]
        break;
 80028f2:	e013      	b.n	800291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028f4:	f7ff f8ce 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80028f8:	61b8      	str	r0, [r7, #24]
        break;
 80028fa:	e00f      	b.n	800291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <UART_SetConfig+0x4c4>)
 80028fe:	61bb      	str	r3, [r7, #24]
        break;
 8002900:	e00c      	b.n	800291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002902:	f7fe ffe1 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8002906:	61b8      	str	r0, [r7, #24]
        break;
 8002908:	e008      	b.n	800291c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290e:	61bb      	str	r3, [r7, #24]
        break;
 8002910:	e004      	b.n	800291c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	77bb      	strb	r3, [r7, #30]
        break;
 800291a:	bf00      	nop
    }

    if (pclk != 0U)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	085a      	lsrs	r2, r3, #1
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	441a      	add	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b0f      	cmp	r3, #15
 800293a:	d909      	bls.n	8002950 <UART_SetConfig+0x4a0>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002942:	d205      	bcs.n	8002950 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	e001      	b.n	8002954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002960:	7fbb      	ldrb	r3, [r7, #30]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40007c00 	.word	0x40007c00
 8002970:	40023800 	.word	0x40023800
 8002974:	00f42400 	.word	0x00f42400

08002978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01a      	beq.n	8002a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a76:	d10a      	bne.n	8002a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002acc:	f7fe f828 	bl	8000b20 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d10e      	bne.n	8002afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f831 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e027      	b.n	8002b4e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d10e      	bne.n	8002b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f81b 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e011      	b.n	8002b4e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b09c      	sub	sp, #112	; 0x70
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b66:	e0a7      	b.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b6e:	f000 80a3 	beq.w	8002cb8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7fd ffd5 	bl	8000b20 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x32>
 8002b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d13f      	bne.n	8002c08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ba8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e6      	bne.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bda:	64ba      	str	r2, [r7, #72]	; 0x48
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e068      	b.n	8002cda <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d050      	beq.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c24:	d148      	bne.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e6      	bne.n	8002c30 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3308      	adds	r3, #8
 8002c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	613b      	str	r3, [r7, #16]
   return(result);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c82:	623a      	str	r2, [r7, #32]
 8002c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	69f9      	ldr	r1, [r7, #28]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e5      	bne.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e010      	b.n	8002cda <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	f43f af48 	beq.w	8002b68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3770      	adds	r7, #112	; 0x70
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <memset>:
 8002ce2:	4402      	add	r2, r0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d100      	bne.n	8002cec <memset+0xa>
 8002cea:	4770      	bx	lr
 8002cec:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf0:	e7f9      	b.n	8002ce6 <memset+0x4>
	...

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	4d0d      	ldr	r5, [pc, #52]	; (8002d2c <__libc_init_array+0x38>)
 8002cf8:	4c0d      	ldr	r4, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfa:	1b64      	subs	r4, r4, r5
 8002cfc:	10a4      	asrs	r4, r4, #2
 8002cfe:	2600      	movs	r6, #0
 8002d00:	42a6      	cmp	r6, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	4d0b      	ldr	r5, [pc, #44]	; (8002d34 <__libc_init_array+0x40>)
 8002d06:	4c0c      	ldr	r4, [pc, #48]	; (8002d38 <__libc_init_array+0x44>)
 8002d08:	f000 f818 	bl	8002d3c <_init>
 8002d0c:	1b64      	subs	r4, r4, r5
 8002d0e:	10a4      	asrs	r4, r4, #2
 8002d10:	2600      	movs	r6, #0
 8002d12:	42a6      	cmp	r6, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1c:	4798      	blx	r3
 8002d1e:	3601      	adds	r6, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d26:	4798      	blx	r3
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08002d84 	.word	0x08002d84
 8002d30:	08002d84 	.word	0x08002d84
 8002d34:	08002d84 	.word	0x08002d84
 8002d38:	08002d88 	.word	0x08002d88

08002d3c <_init>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr

08002d48 <_fini>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr
